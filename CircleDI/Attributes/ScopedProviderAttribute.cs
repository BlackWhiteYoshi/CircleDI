namespace CircleDI;

public static partial class Attributes {
    public const string ScopedProviderAttribute = $$"""
        // <auto-generated/>
        #pragma warning disable
        #nullable enable annotations


        #if !CIRCLEDI_EXCLUDE_ATTRIBUTES
        
        using System;
    
        namespace CircleDIAttributes;

        /// <summary>
        /// <para>
        /// This attribute can be applied to the ServiceProvider itself, so right next to the <see cref="ServiceProviderAttribute" />
        /// or to a class named "Scope" inside the ServiceProvider,<br />
        /// but not both.
        /// </para>
        /// <para>This attribute itself does nothing, but it provides additional configurations for the ScopedProvider.</para>
        /// </summary>
        [AttributeUsage(AttributeTargets.Class)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("{{NAME}}", "{{VERSION}}")]
        internal sealed class ScopedProviderAttribute : Attribute {
            /// <summary>
            /// <para>If turned off, no Scope Class is generated and therefore <see cref="ScopedAttribute"/> has no effect.</para>
            /// <para>Default is true.</para>
            /// </summary>
            public bool Generate { get; init; }

            /// <summary>
            /// <para>
            /// Decides whether services in the ScopedProvider defaulting to lazy construction or instantiation inside the constructor.
            /// This option applies to all services where the "CreationTime"-attribute is not set.
            /// </para>
            /// <para>Default is <see cref="ServiceProviderAttribute.CreationTime" />.</para>
            /// </summary>
            public CreationTiming CreationTime { get; init; }

            /// <summary>
            /// <para>
            /// Decides whether the members to access the services in the ScopedProvider defaulting to properties or methods.
            /// This option applies to all services where the "GetAccessor"-attribute is not set.
            /// </para>
            /// <para>Default is <see cref="ServiceProviderAttribute.GetAccessor" />.</para>
            /// </summary>
            public GetAccess GetAccessor { get; init; }

            /// <summary>
            /// <para>Toggles the generation of the Dispose methods:</para>
            /// <para>
            /// public void Dispose();<br />
            /// public ValueTask DisposeAsync();
            /// </para>
            /// <para>It can be toggled that both are generated, only one of them or the generation is skipped entirely.</para>
            /// <para>Default is <see cref="ServiceProviderAttribute.GenerateDisposeMethods" />.</para>
            /// </summary>
            public DisposeGeneration GenerateDisposeMethods { get; init; }

            /// <summary>
            /// <para>Indicates if the generated code will be thread safe or a little bit more efficient.</para>
            /// <para>
            /// Affects performance for lazy constructed scoped services and disposables transient services:<br />
            /// - Scoped services acquire a lock for construction.<br />
            /// - Disposable transient services acquire a lock when constructed and disposed to synchronize access on a dispose-list.
            /// </para>
            /// <para>This option should be set to false, if the provider is used in a single threaded scenario or only accessed by one thread at a time.</para>
            /// <para>Default is <see cref="ServiceProviderAttribute.ThreadSafe" />.</para>
            /// </summary>
            public bool ThreadSafe { get; init; }
        }

        #endif

        """;
}
