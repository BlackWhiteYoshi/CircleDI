namespace CircleDI;

public static partial class Attributes {
    public const string DisposeGenerationEnum = $$"""
        // <auto-generated/>
        #pragma warning disable
        #nullable enable annotations


        #if !CIRCLEDI_EXCLUDE_ATTRIBUTES
        
        namespace CircleDIAttributes;

        /// <summary>
        /// <para>Configuration for generating the Dispose methods:</para>
        /// <para>
        /// public void Dispose();<br />
        /// public ValueTask DisposeAsync();
        /// </para>
        /// <para>It can be toggled that both are generated, only one of them or the generation is skipped entirely.</para>
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("{{NAME}}", "{{VERSION}}")]
        internal enum DisposeGeneration {
            /// <summary>
            /// The generation of both dispose methods will be skipped.
            /// </summary>
            NoDisposing = 0,

            /// <summary>
            /// <para>Only the sync version of Dispose will be generated:</para>
            /// <para>public void Dispose();</para>
            /// </summary>
            DisposeOnly = 1,

            /// <summary>
            /// <para>Only the async version DisposeAsync will be generated:</para>
            /// <para>public ValueTask DisposeAsync();</para>
            /// </summary>
            DisposeAsyncOnly = 2,

            /// <summary>
            /// <para>Both versions Dispose and DisposeAsync will be generated.</para>
            /// <para>
            /// public void Dispose();<br />
            /// public ValueTask DisposeAsync();
            /// </para>
            /// </summary>
            GenerateBoth = 3
        }

        #endif

        """;
}
