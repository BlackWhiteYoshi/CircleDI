namespace CircleDI.Defenitions;

public static partial class Attributes {
    public const string ImportAttribute = $$"""
        // <auto-generated/>
        #pragma warning disable
        #nullable enable annotations


        #if !CIRCLEDI_EXCLUDE_ATTRIBUTES
        
        using System;
    
        namespace CircleDIAttributes;

        /// <summary>
        /// <para>Registers all attributes of the specified class/struct/interface in <i>TModule</i>.</para>
        /// <para>
        /// There are several options to handle the instantiation of the module:<br />
        /// - static (no instantiation)<br />
        /// - injected as service<br />
        /// - given as parameter
        /// </para>
        /// </summary>
        /// <typeparam name="TModule">The class, struct or interface containing the attributes to include.</typeparam>
        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, AllowMultiple = true)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("{{NAME}}", "{{VERSION}}")]
        internal sealed class ImportAttribute<TModule> : Attribute {
            /// <summary>
            /// Automatically chooses the import option, see <see cref="ImportMode.Auto"/>.
            /// </summary>
            public ImportAttribute() { }

            /// <summary>
            /// An import option for handling the instantiation of the module.
            /// </summary>
            /// <param name="mode">
            /// <para>
            /// Option for handling the instantiation of the module.<br />
            /// It can be static (no instantiation), injected as service or given as parameter.
            /// </para>
            /// <para>Default is <see cref="ImportMode.Auto"/>.</para>
            /// </param>
            public ImportAttribute(ImportMode mode) { }
        }

        #endif

        """;
}
