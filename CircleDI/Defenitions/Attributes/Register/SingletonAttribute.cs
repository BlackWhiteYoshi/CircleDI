namespace CircleDI.Defenitions;

public static partial class Attributes {
    public const string SingletonAttribute = $$"""
        // <auto-generated/>
        #pragma warning disable
        #nullable enable annotations


        #if !CIRCLEDI_EXCLUDE_ATTRIBUTES
        
        using System;
    
        namespace CircleDIAttributes;

        /// <summary>
        /// <para>Specifies a singleton service. That means there will be a single instance of that service in every ServiceProvider instance.</para>
        /// <para>If <see cref="ServiceProviderAttribute"/> is used at the same class, this service will be added to the provider.</para>
        /// </summary>
        /// <typeparam name="TService">Type of the service.</typeparam>
        /// <typeparam name="TImplementation">Type of the implementation.</typeparam>
        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, AllowMultiple = true)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("{{NAME}}", "{{VERSION}}")]
        internal sealed class SingletonAttribute<TService, TImplementation> : Attribute where TImplementation : TService {
            {{SINGLETON_ATTRIBUTE_CONTENT}}
        }

        /// <summary>
        /// Shorthand for <see cref="SingletonAttribute{TService, TImplementation}"/> where type of service and implementation is the same.
        /// </summary>
        /// <typeparam name="TService">Type of the service and implementation.</typeparam>
        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, AllowMultiple = true)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("{{NAME}}", "{{VERSION}}")]
        internal sealed class SingletonAttribute<TService> : Attribute {
            {{SINGLETON_ATTRIBUTE_CONTENT}}
        }

        /// <summary>
        /// <para>Specifies a singleton service. That means there will be a single instance of that service in every ServiceProvider instance.</para>
        /// <para>If <see cref="ServiceProviderAttribute"/> is used at the same class, this service will be added to the provider.</para>
        /// </summary>
        /// <param name="service">Type of the service.</param>
        /// <param name="implementation">Type of the implementation.</param>
        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface, AllowMultiple = true)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("{{NAME}}", "{{VERSION}}")]
        internal sealed class SingletonAttribute(Type service, Type implementation) : Attribute {
            /// <summary>
            /// Specifies a singleton service where type of service and implementation is the same.
            /// </summary>
            /// <param name="service">Type of the service and implementation.</param>
            public SingletonAttribute(Type service) : this(service, service) { }

            {{SINGLETON_ATTRIBUTE_CONTENT}}
        }

        #endif

        """;

    private const string SINGLETON_ATTRIBUTE_CONTENT = $$"""
        /// <summary>
            /// <para>Fieldname, propertyname or methodname that will be the implementation supplier for the given service.</para>
            /// <para>The parameters of the method will be dependency injected.</para>
            /// </summary>
            public string Implementation { get; init; }

            {{SERVICE_NAME_PROPERTY}}

            {{CREATION_TIME_PROPERTY}}

            {{GET_ACCESSOR_PROPERTY}}

            {{SERVICE_NO_DISPOSE_PROPERTY}}
        """;
}
