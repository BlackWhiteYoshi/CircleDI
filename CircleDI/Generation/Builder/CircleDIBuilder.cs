using CircleDI.Defenitions;
using CircleDI.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.Extensions.ObjectPool;
using System.Text;

namespace CircleDI.Generation;

/// <summary>
/// Contains the build functionality to build the ServiceProvider/ScopeProvider class and interface.
/// </summary>
public static class CircleDIBuilder {
    /// <summary>
    /// Gives a preconfigured <see cref="ObjectPool<StringBuilder>"/> for building class or interface.
    /// </summary>
    /// <returns></returns>
    public static ObjectPool<StringBuilder> CreateStringBuilderPool() => new DefaultObjectPoolProvider().CreateStringBuilderPool(initialCapacity: 8192, maximumRetainedCapacity: 1024 * 1024);


    /// <summary>
    /// Builds the ServiceProvider class with ScopeProvider class.
    /// </summary>
    /// <param name="stringBuilderPool"></param>
    /// <param name="context"></param>
    /// <param name="serviceProvider"></param>
    public static void GenerateClass(this ObjectPool<StringBuilder> stringBuilderPool, SourceProductionContext context, ServiceProvider serviceProvider) {
        if (serviceProvider.ErrorManager.ErrorList.Count > 0) {
            foreach (Diagnostic error in serviceProvider.ErrorManager.ErrorList)
                context.ReportDiagnostic(error);

            return;
        }

        StringBuilder builder = stringBuilderPool.Get();
        CircleDIBuilderCore core = new(builder, serviceProvider);

        builder.Append("""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable annotations


            using System;

            """);
        if (serviceProvider.GenerateDisposeMethods.HasFlag(DisposeGeneration.DisposeAsync) || serviceProvider.GenerateDisposeMethodsScope.HasFlag(DisposeGeneration.DisposeAsync))
            builder.Append("using System.Threading.Tasks;\n");
        builder.Append('\n');

        builder.AppendNamespace(serviceProvider.Identifier.NameSpaceList);

        // containing types
        for (int i = serviceProvider.Identifier.ContainingTypeList.Count - 1; i >= 0; i--) {
            builder.AppendIndent(core.indent)
                .AppendInterpolation($"partial {serviceProvider.Identifier.ContainingTypeList[i].Keyword.AsString()} ")
                .AppendOpenName(serviceProvider.Identifier.ContainingTypeList[i])
                .Append(" {\n");
            core.indent.IncreaseLevel();
        }

        // class head
        core.AppendClassSummary();
        builder.AppendIndent(core.indent);
        foreach (string modifier in serviceProvider.Modifiers)
            builder.AppendInterpolation($"{modifier} ");
        builder.AppendInterpolation($"partial {serviceProvider.Keyword.AsString()} {serviceProvider.Identifier.Name}")
            .AppendOpenGenerics(serviceProvider.Identifier)
            .Append(" : ");
        if (serviceProvider.HasInterface)
            builder.Append("global::")
                .AppendOpenFullyQualified(serviceProvider.InterfaceIdentifier)
                .Append(", ");
        builder.Append("IServiceProvider {\n");
        core.indent.IncreaseLevel(); // 1

        core.AppendConstructor();
        core.AppendCreateScope();
        core.AppendSingletonScopedServices();
        core.AppendTransientServices();
        core.AppendDelegateServices();
        core.AppendIServiceProviderNotScoped();
        core.AppendDisposeMethods();


        // Scope
        if (serviceProvider.GenerateScope) {
            core.SetToScope();
            builder.Append('\n');

            // class head
            core.AppendClassSummary();
            builder.AppendIndent(core.indent);
            foreach (string modifier in serviceProvider.ModifiersScope)
                builder.AppendInterpolation($"{modifier} ");
            builder.AppendInterpolation($"partial {serviceProvider.KeywordScope.AsString()} Scope")
                .AppendOpenGenerics(serviceProvider.IdentifierScope)
                .Append(" : ");
            if (serviceProvider.HasInterface) {
                builder.Append("global::")
                    .AppendOpenFullyQualified(serviceProvider.InterfaceIdentifierScope)
                    .Append(", ");
            }
            builder.Append("IServiceProvider {\n");
            core.indent.IncreaseLevel(); // 2

            core.AppendConstructor();
            core.AppendSingletonScopedServices();
            core.AppendSingletonExposing();
            core.AppendTransientServices();
            core.AppendDelegateServices();
            core.AppendIServiceProviderAllServices();
            core.AppendDisposeMethods();

            // ScopedProvider closing
            builder.Length -= 2;
            core.indent.DecreaseLevel(); // 1
            builder.AppendIndent(core.indent)
                .Append("}\n");
        }
        else
            builder.Length -= 2;

        core.AppendUnsafeAccessorMethods();

        // ServiceProvider closing
        core.indent.DecreaseLevel(); // 0
        builder.AppendIndent(core.indent)
            .Append("}\n");

        // containing types closing
        for (int i = 0; i < serviceProvider.Identifier.ContainingTypeList.Count; i++) {
            core.indent.DecreaseLevel();
            builder.AppendIndent(core.indent)
                .Append("}\n");
        }

        string source = builder.ToString();
        string hintName = builder.CreateHintName(serviceProvider.Identifier, ".g.cs");
        context.AddSource(hintName, source);

        stringBuilderPool.Return(builder);
    }

    /// <summary>
    /// Builds the ServiceProvider interface with ScopeProvider interface.
    /// </summary>
    /// <param name="stringBuilderPool"></param>
    /// <param name="context"></param>
    /// <param name="serviceProvider"></param>
    /// <exception cref="Exception"></exception>
    public static void GenerateInterface(this ObjectPool<StringBuilder> stringBuilderPool, SourceProductionContext context, ServiceProvider serviceProvider) {
        if (!serviceProvider.HasInterface || serviceProvider.ErrorManager.ErrorList.Count > 0)
            return;

        StringBuilder builder = stringBuilderPool.Get();
        CircleDIBuilderCore core = new(builder, serviceProvider);

        builder.Append("""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable annotations


            using System;


            """);
        builder.AppendNamespace(serviceProvider.InterfaceIdentifier.NameSpaceList);

        // containing types
        for (int i = serviceProvider.InterfaceIdentifier.ContainingTypeList.Count - 1; i >= 0; i--) {
            builder.AppendIndent(core.indent)
                .AppendInterpolation($"partial {serviceProvider.InterfaceIdentifier.ContainingTypeList[i].Keyword.AsString()} ")
                .AppendOpenName(serviceProvider.InterfaceIdentifier.ContainingTypeList[i])
                .Append(" {\n");
            core.indent.IncreaseLevel();
        }

        // interface head
        core.AppendClassSummary();
        builder.AppendIndent(core.indent)
            .AppendInterpolation($"{serviceProvider.InterfaceAccessibility.AsString()}partial interface {serviceProvider.InterfaceIdentifier.Name}")
            .AppendOpenGenerics(serviceProvider.InterfaceIdentifier)
            .Append(serviceProvider.GenerateDisposeMethods switch {
                DisposeGeneration.NoDisposing => string.Empty,
                DisposeGeneration.Dispose => " : IDisposable",
                DisposeGeneration.DisposeAsync => " : IAsyncDisposable",
                DisposeGeneration.GenerateBoth => " : IDisposable, IAsyncDisposable",
                _ => throw new Exception($"Invalid DisposeGenerationEnum value: serviceProvider.GenerateDisposeMethods = {serviceProvider.GenerateDisposeMethods}")
            })
            .Append(" {\n");
        core.indent.IncreaseLevel(); // 1

        // "special" method CreateScope()
        if (serviceProvider.GenerateScope) {
            core.AppendCreateScopeSummary();
            
            builder.AppendIndent(core.indent)
                .Append("global::")
                .AppendOpenFullyQualified(serviceProvider.InterfaceIdentifierScope)
                .Append(" CreateScope")
                .AppendOpenGenerics(serviceProvider.IdentifierScope)
                .Append('(');
            
            foreach (Dependency dependency in serviceProvider.CreateScope.ConstructorDependencyList.Concat<Dependency>(serviceProvider.CreateScope.PropertyDependencyList))
                if (!dependency.HasAttribute)
                    // if no attribute => dependency.ServiceType has value
                    builder.Append("global::")
                        .AppendClosedFullyQualified(dependency.ServiceType!)
                        .AppendInterpolation($" {dependency.Name}, ");
            if (builder[^1] == ' ')
                builder.Length -= 2;

            builder.Append(");\n\n");
        }

        // service getter
        foreach (Service service in serviceProvider.SortedServiceList) {
            if (service.Lifetime.HasFlag(ServiceLifetime.Scoped))
                continue;
            if (service.Implementation.Type != MemberType.None && service.Implementation.IsScoped)
                continue;

            core.AppendServiceSummary(service);
            
            builder.AppendIndent(core.indent);
            if (service.IsRefable && !serviceProvider.Keyword.HasFlag(TypeKeyword.Struct))
                builder.Append("ref ");
            builder.Append("global::");
            builder.AppendClosedFullyQualified(service.ServiceType);
            builder.Append(' ');
            if (service.GetAccessor == GetAccess.Property)
                builder.AppendInterpolation($"{service.Name} {{ get; }}");
            else
                builder.AppendInterpolation($"Get{service.Name}();");
            builder.Append("\n\n");
        }

        // IScope
        if (serviceProvider.GenerateScope) {
            core.SetToScope();
            builder.Append('\n');

            // class head
            core.AppendClassSummary();
            builder.AppendIndent(core.indent)
                .AppendInterpolation($"{serviceProvider.InterfaceAccessibilityScope.AsString()}partial interface IScope")
                .AppendOpenGenerics(serviceProvider.InterfaceIdentifierScope)
                .Append(serviceProvider.GenerateDisposeMethodsScope switch {
                    DisposeGeneration.NoDisposing => string.Empty,
                    DisposeGeneration.Dispose => " : IDisposable",
                    DisposeGeneration.DisposeAsync => " : IAsyncDisposable",
                    DisposeGeneration.GenerateBoth => " : IDisposable, IAsyncDisposable",
                    _ => throw new Exception($"Invalid DisposeGenerationEnum value: serviceProvider.GenerateDisposeMethodsScope = {serviceProvider.GenerateDisposeMethodsScope}")
                })
                .Append(" {\n");
            core.indent.IncreaseLevel(); // 2

            // service getter
            foreach (Service service in serviceProvider.SortedServiceList) {
                core.AppendServiceSummary(service);

                builder.AppendIndent(core.indent);

                bool isSingletonNotRefable = service.Lifetime == ServiceLifetime.Singleton && serviceProvider.Keyword.HasFlag(TypeKeyword.Struct);
                if (service.IsRefable && !serviceProvider.KeywordScope.HasFlag(TypeKeyword.Struct) && !isSingletonNotRefable)
                    builder.Append("ref ");

                builder.Append("global::")
                    .AppendClosedFullyQualified(service.ServiceType)
                    .Append(' ');
                if (service.GetAccessor == GetAccess.Property)
                    builder.AppendInterpolation($"{service.Name} {{ get; }}");
                else
                    builder.AppendInterpolation($"Get{service.Name}();");
                builder.Append("\n\n");
            }

            builder.Length--;
            core.indent.DecreaseLevel(); // 1
            builder.AppendIndent(core.indent)
                .Append("}\n");
        }
        else
            builder.Length--;

        core.indent.DecreaseLevel(); // 0
        builder.AppendIndent(core.indent)
            .Append("}\n");

        // containing types closing
        for (int i = 0; i < serviceProvider.InterfaceIdentifier.ContainingTypeList.Count; i++) {
            core.indent.DecreaseLevel();
            builder.AppendIndent(core.indent)
                .Append("}\n");
        }

        string source = builder.ToString();
        string hintName = builder.CreateHintName(serviceProvider.InterfaceIdentifier, ".g.cs");
        context.AddSource(hintName, source);

        stringBuilderPool.Return(builder);
    }
}
