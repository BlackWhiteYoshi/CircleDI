// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 7<br />
/// - Singleton: 6<br />
/// - Scoped: 1<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _testStruct = new global::MyCode.TestStruct();
        _refInject = new global::MyCode.RefInject(ref _testStruct);
        _inInject = new global::MyCode.InInject(in _testStruct);
        _outInject = new global::MyCode.OutInject(out _testStruct);
        _refReadonlyInject = new global::MyCode.RefReadonlyInject(ref _testStruct);
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() {
        return new global::MyCode.TestProvider.Scope(this);
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestStruct"/><br />
    /// Implementation type: <see cref="global::MyCode.TestStruct"/>
    /// </summary>
    public ref global::MyCode.TestStruct TestStruct => ref _testStruct;
    private global::MyCode.TestStruct _testStruct;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.RefInject"/><br />
    /// Implementation type: <see cref="global::MyCode.RefInject"/>
    /// </summary>
    public global::MyCode.RefInject RefInject => _refInject;
    private global::MyCode.RefInject _refInject;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.InInject"/><br />
    /// Implementation type: <see cref="global::MyCode.InInject"/>
    /// </summary>
    public global::MyCode.InInject InInject => _inInject;
    private global::MyCode.InInject _inInject;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.OutInject"/><br />
    /// Implementation type: <see cref="global::MyCode.OutInject"/>
    /// </summary>
    public global::MyCode.OutInject OutInject => _outInject;
    private global::MyCode.OutInject _outInject;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.RefReadonlyInject"/><br />
    /// Implementation type: <see cref="global::MyCode.RefReadonlyInject"/>
    /// </summary>
    public global::MyCode.RefReadonlyInject RefReadonlyInject => _refReadonlyInject;
    private global::MyCode.RefReadonlyInject _refReadonlyInject;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "InInject":
                if (serviceType == typeof(global::MyCode.InInject))
                    return InInject;
                return null;
            case "OutInject":
                if (serviceType == typeof(global::MyCode.OutInject))
                    return OutInject;
                return null;
            case "RefInject":
                if (serviceType == typeof(global::MyCode.RefInject))
                    return RefInject;
                return null;
            case "TestStruct":
                if (serviceType == typeof(global::MyCode.TestStruct))
                    return TestStruct;
                return null;
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            case "RefReadonlyInject":
                if (serviceType == typeof(global::MyCode.RefReadonlyInject))
                    return RefReadonlyInject;
                return null;
            default:
                return null;
        }
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 7<br />
    /// - Singleton: 6<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private global::MyCode.TestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of. It must be an instance of <see cref="TestProvider"/>.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = (global::MyCode.TestProvider)testProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestStruct"/><br />
        /// Implementation type: <see cref="global::MyCode.TestStruct"/>
        /// </summary>
        public ref global::MyCode.TestStruct TestStruct => ref _testProvider.TestStruct;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.RefInject"/><br />
        /// Implementation type: <see cref="global::MyCode.RefInject"/>
        /// </summary>
        public global::MyCode.RefInject RefInject => _testProvider.RefInject;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.InInject"/><br />
        /// Implementation type: <see cref="global::MyCode.InInject"/>
        /// </summary>
        public global::MyCode.InInject InInject => _testProvider.InInject;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.OutInject"/><br />
        /// Implementation type: <see cref="global::MyCode.OutInject"/>
        /// </summary>
        public global::MyCode.OutInject OutInject => _testProvider.OutInject;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.RefReadonlyInject"/><br />
        /// Implementation type: <see cref="global::MyCode.RefReadonlyInject"/>
        /// </summary>
        public global::MyCode.RefReadonlyInject RefReadonlyInject => _testProvider.RefReadonlyInject;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "InInject":
                    if (serviceType == typeof(global::MyCode.InInject))
                        return InInject;
                    return null;
                case "OutInject":
                    if (serviceType == typeof(global::MyCode.OutInject))
                        return OutInject;
                    return null;
                case "RefInject":
                    if (serviceType == typeof(global::MyCode.RefInject))
                        return RefInject;
                    return null;
                case "TestStruct":
                    if (serviceType == typeof(global::MyCode.TestStruct))
                        return TestStruct;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                case "RefReadonlyInject":
                    if (serviceType == typeof(global::MyCode.RefReadonlyInject))
                        return RefReadonlyInject;
                    return null;
                default:
                    return null;
            }
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 7<br />
/// - Singleton: 6<br />
/// - Scoped: 1<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public partial interface ITestProvider : IDisposable, IAsyncDisposable {
    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    global::MyCode.ITestProvider.IScope CreateScope();

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.InInject"/><br />
    /// Implementation type: <see cref="global::MyCode.InInject"/>
    /// </summary>
    global::MyCode.InInject InInject { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.OutInject"/><br />
    /// Implementation type: <see cref="global::MyCode.OutInject"/>
    /// </summary>
    global::MyCode.OutInject OutInject { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.RefInject"/><br />
    /// Implementation type: <see cref="global::MyCode.RefInject"/>
    /// </summary>
    global::MyCode.RefInject RefInject { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestStruct"/><br />
    /// Implementation type: <see cref="global::MyCode.TestStruct"/>
    /// </summary>
    ref global::MyCode.TestStruct TestStruct { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    global::MyCode.ITestProvider Self { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.RefReadonlyInject"/><br />
    /// Implementation type: <see cref="global::MyCode.RefReadonlyInject"/>
    /// </summary>
    global::MyCode.RefReadonlyInject RefReadonlyInject { get; }


    /// <summary>
    /// <para>
    /// Number of services registered: 7<br />
    /// - Singleton: 6<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public partial interface IScope : IDisposable, IAsyncDisposable {
        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        global::MyCode.ITestProvider.IScope SelfScope { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.InInject"/><br />
        /// Implementation type: <see cref="global::MyCode.InInject"/>
        /// </summary>
        global::MyCode.InInject InInject { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.OutInject"/><br />
        /// Implementation type: <see cref="global::MyCode.OutInject"/>
        /// </summary>
        global::MyCode.OutInject OutInject { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.RefInject"/><br />
        /// Implementation type: <see cref="global::MyCode.RefInject"/>
        /// </summary>
        global::MyCode.RefInject RefInject { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestStruct"/><br />
        /// Implementation type: <see cref="global::MyCode.TestStruct"/>
        /// </summary>
        ref global::MyCode.TestStruct TestStruct { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        global::MyCode.ITestProvider Self { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.RefReadonlyInject"/><br />
        /// Implementation type: <see cref="global::MyCode.RefReadonlyInject"/>
        /// </summary>
        global::MyCode.RefReadonlyInject RefReadonlyInject { get; }
    }
}
