// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 6<br />
/// - Singleton: 5<br />
/// - Scoped: 1<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _testService = new global::MyCode.TestService<global::MyCode.TestParameter>();
        _testServiceInt = new global::MyCode.TestService<global::System.Int32>();
        _testServiceString = new global::MyCode.TestService<global::System.String>();
        _int32 = new global::System.Int32();
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() => new global::MyCode.TestProvider.Scope(Self);


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestService{global::MyCode.TestParameter}"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService{global::MyCode.TestParameter}"/>
    /// </summary>
    public global::MyCode.TestService<global::MyCode.TestParameter> TestService => _testService;
    private global::MyCode.TestService<global::MyCode.TestParameter> _testService;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestService{global::System.Int32}"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService{global::System.Int32}"/>
    /// </summary>
    public global::MyCode.TestService<global::System.Int32> TestServiceInt => _testServiceInt;
    private global::MyCode.TestService<global::System.Int32> _testServiceInt;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestService{global::System.String}"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService{global::System.String}"/>
    /// </summary>
    public global::MyCode.TestService<global::System.String> TestServiceString => _testServiceString;
    private global::MyCode.TestService<global::System.String> _testServiceString;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::System.IComparable"/><br />
    /// Implementation type: <see cref="global::System.Int32"/>
    /// </summary>
    public global::System.IComparable Int32 => _int32;
    private global::System.Int32 _int32;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "IComparable":
                if (serviceType == typeof(global::System.IComparable))
                    return Int32;
                return null;
            case "TestService`1":
                if (serviceType == typeof(global::MyCode.TestService<global::MyCode.TestParameter>))
                    return TestService;
                if (serviceType == typeof(global::MyCode.TestService<global::System.Int32>))
                    return TestServiceInt;
                if (serviceType == typeof(global::MyCode.TestService<global::System.String>))
                    return TestServiceString;
                return null;
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            default:
                return null;
        }
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 6<br />
    /// - Singleton: 5<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private global::MyCode.ITestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = testProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestService{global::MyCode.TestParameter}"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService{global::MyCode.TestParameter}"/>
        /// </summary>
        public global::MyCode.TestService<global::MyCode.TestParameter> TestService => _testProvider.TestService;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestService{global::System.Int32}"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService{global::System.Int32}"/>
        /// </summary>
        public global::MyCode.TestService<global::System.Int32> TestServiceInt => _testProvider.TestServiceInt;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestService{global::System.String}"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService{global::System.String}"/>
        /// </summary>
        public global::MyCode.TestService<global::System.String> TestServiceString => _testProvider.TestServiceString;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::System.IComparable"/><br />
        /// Implementation type: <see cref="global::System.Int32"/>
        /// </summary>
        public global::System.IComparable Int32 => _testProvider.Int32;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "IComparable":
                    if (serviceType == typeof(global::System.IComparable))
                        return Int32;
                    return null;
                case "TestService`1":
                    if (serviceType == typeof(global::MyCode.TestService<global::MyCode.TestParameter>))
                        return TestService;
                    if (serviceType == typeof(global::MyCode.TestService<global::System.Int32>))
                        return TestServiceInt;
                    if (serviceType == typeof(global::MyCode.TestService<global::System.String>))
                        return TestServiceString;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                default:
                    return null;
            }
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 6<br />
/// - Singleton: 5<br />
/// - Scoped: 1<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public partial interface ITestProvider : IDisposable, IAsyncDisposable {
    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    global::MyCode.ITestProvider.IScope CreateScope();

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::System.IComparable"/><br />
    /// Implementation type: <see cref="global::System.Int32"/>
    /// </summary>
    global::System.IComparable Int32 { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestService{global::MyCode.TestParameter}"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService{global::MyCode.TestParameter}"/>
    /// </summary>
    global::MyCode.TestService<global::MyCode.TestParameter> TestService { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestService{global::System.Int32}"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService{global::System.Int32}"/>
    /// </summary>
    global::MyCode.TestService<global::System.Int32> TestServiceInt { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestService{global::System.String}"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService{global::System.String}"/>
    /// </summary>
    global::MyCode.TestService<global::System.String> TestServiceString { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    global::MyCode.ITestProvider Self { get; }


    /// <summary>
    /// <para>
    /// Number of services registered: 6<br />
    /// - Singleton: 5<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public partial interface IScope : IDisposable, IAsyncDisposable {
        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        global::MyCode.ITestProvider.IScope SelfScope { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::System.IComparable"/><br />
        /// Implementation type: <see cref="global::System.Int32"/>
        /// </summary>
        global::System.IComparable Int32 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestService{global::MyCode.TestParameter}"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService{global::MyCode.TestParameter}"/>
        /// </summary>
        global::MyCode.TestService<global::MyCode.TestParameter> TestService { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestService{global::System.Int32}"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService{global::System.Int32}"/>
        /// </summary>
        global::MyCode.TestService<global::System.Int32> TestServiceInt { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestService{global::System.String}"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService{global::System.String}"/>
        /// </summary>
        global::MyCode.TestService<global::System.String> TestServiceString { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        global::MyCode.ITestProvider Self { get; }
    }
}
