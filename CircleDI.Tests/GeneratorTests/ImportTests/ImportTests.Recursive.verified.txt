// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 8<br />
/// - Singleton: 2<br />
/// - Scoped: 1<br />
/// - Transient: 5<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    private readonly global::MyCode.TestModuleParameter _testModuleParameter;

    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider(global::MyCode.TestModuleParameter testModuleParameter) {
        _testModuleParameter = testModuleParameter;

        _testModuleService = new global::MyCode.TestModuleService();
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() {
        return new global::MyCode.TestProvider.Scope(this);
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestModuleService"/><br />
    /// Implementation type: <see cref="global::MyCode.TestModuleService"/>
    /// </summary>
    public global::MyCode.TestModuleService TestModuleService => _testModuleService;
    private readonly global::MyCode.TestModuleService _testModuleService;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService1"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService1"/>
    /// </summary>
    public global::MyCode.ITestService1 TestService1 {
        get {
            global::MyCode.TestService1 testService1 = global::MyCode.ITestModuleStatic.CreateService;
            return testService1;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService2"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService2"/>
    /// </summary>
    public global::MyCode.ITestService2 TestService2 {
        get {
            global::MyCode.TestService2 testService2 = TestModuleService.CreateService;
            return testService2;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService3"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService3"/>
    /// </summary>
    public global::MyCode.ITestService3 TestService3 {
        get {
            global::MyCode.TestService3 testService3 = global::MyCode.TestModuleService.CreateServiceStatic;
            return testService3;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService4"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService4"/>
    /// </summary>
    public global::MyCode.ITestService4 TestService4 {
        get {
            global::MyCode.TestService4 testService4 = _testModuleParameter.CreateService;
            return testService4;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService5"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService5"/>
    /// </summary>
    public global::MyCode.ITestService5 TestService5 {
        get {
            global::MyCode.TestService5 testService5 = global::MyCode.TestModuleParameter.CreateServiceStatic;
            return testService5;
        }
    }


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            case "ITestService1":
                if (serviceType == typeof(global::MyCode.ITestService1))
                    return TestService1;
                return null;
            case "ITestService2":
                if (serviceType == typeof(global::MyCode.ITestService2))
                    return TestService2;
                return null;
            case "ITestService3":
                if (serviceType == typeof(global::MyCode.ITestService3))
                    return TestService3;
                return null;
            case "ITestService4":
                if (serviceType == typeof(global::MyCode.ITestService4))
                    return TestService4;
                return null;
            case "ITestService5":
                if (serviceType == typeof(global::MyCode.ITestService5))
                    return TestService5;
                return null;
            case "TestModuleService":
                if (serviceType == typeof(global::MyCode.TestModuleService))
                    return TestModuleService;
                return null;
            default:
                return null;
        }
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 8<br />
    /// - Singleton: 2<br />
    /// - Scoped: 1<br />
    /// - Transient: 5<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private readonly global::MyCode.TestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of. It must be an instance of <see cref="TestProvider"/>.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = (global::MyCode.TestProvider)testProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestModuleService"/><br />
        /// Implementation type: <see cref="global::MyCode.TestModuleService"/>
        /// </summary>
        public global::MyCode.TestModuleService TestModuleService => _testProvider.TestModuleService;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService1"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService1"/>
        /// </summary>
        public global::MyCode.ITestService1 TestService1 {
            get {
                global::MyCode.TestService1 testService1 = global::MyCode.ITestModuleStatic.CreateService;
                return testService1;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService2"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService2"/>
        /// </summary>
        public global::MyCode.ITestService2 TestService2 {
            get {
                global::MyCode.TestService2 testService2 = _testProvider.TestModuleService.CreateService;
                return testService2;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService3"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService3"/>
        /// </summary>
        public global::MyCode.ITestService3 TestService3 {
            get {
                global::MyCode.TestService3 testService3 = global::MyCode.TestModuleService.CreateServiceStatic;
                return testService3;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService4"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService4"/>
        /// </summary>
        public global::MyCode.ITestService4 TestService4 {
            get {
                global::MyCode.TestService4 testService4 = _testProvider._testModuleParameter.CreateService;
                return testService4;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService5"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService5"/>
        /// </summary>
        public global::MyCode.ITestService5 TestService5 {
            get {
                global::MyCode.TestService5 testService5 = global::MyCode.TestModuleParameter.CreateServiceStatic;
                return testService5;
            }
        }


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                case "ITestService1":
                    if (serviceType == typeof(global::MyCode.ITestService1))
                        return TestService1;
                    return null;
                case "ITestService2":
                    if (serviceType == typeof(global::MyCode.ITestService2))
                        return TestService2;
                    return null;
                case "ITestService3":
                    if (serviceType == typeof(global::MyCode.ITestService3))
                        return TestService3;
                    return null;
                case "ITestService4":
                    if (serviceType == typeof(global::MyCode.ITestService4))
                        return TestService4;
                    return null;
                case "ITestService5":
                    if (serviceType == typeof(global::MyCode.ITestService5))
                        return TestService5;
                    return null;
                case "TestModuleService":
                    if (serviceType == typeof(global::MyCode.TestModuleService))
                        return TestModuleService;
                    return null;
                default:
                    return null;
            }
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 8<br />
/// - Singleton: 2<br />
/// - Scoped: 1<br />
/// - Transient: 5<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public partial interface ITestProvider : IDisposable, IAsyncDisposable {
    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    global::MyCode.ITestProvider.IScope CreateScope();

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    global::MyCode.ITestProvider Self { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService1"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService1"/>
    /// </summary>
    global::MyCode.ITestService1 TestService1 { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService2"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService2"/>
    /// </summary>
    global::MyCode.ITestService2 TestService2 { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService3"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService3"/>
    /// </summary>
    global::MyCode.ITestService3 TestService3 { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService4"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService4"/>
    /// </summary>
    global::MyCode.ITestService4 TestService4 { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService5"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService5"/>
    /// </summary>
    global::MyCode.ITestService5 TestService5 { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestModuleService"/><br />
    /// Implementation type: <see cref="global::MyCode.TestModuleService"/>
    /// </summary>
    global::MyCode.TestModuleService TestModuleService { get; }


    /// <summary>
    /// <para>
    /// Number of services registered: 8<br />
    /// - Singleton: 2<br />
    /// - Scoped: 1<br />
    /// - Transient: 5<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public partial interface IScope : IDisposable, IAsyncDisposable {
        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        global::MyCode.ITestProvider.IScope SelfScope { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        global::MyCode.ITestProvider Self { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService1"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService1"/>
        /// </summary>
        global::MyCode.ITestService1 TestService1 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService2"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService2"/>
        /// </summary>
        global::MyCode.ITestService2 TestService2 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService3"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService3"/>
        /// </summary>
        global::MyCode.ITestService3 TestService3 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService4"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService4"/>
        /// </summary>
        global::MyCode.ITestService4 TestService4 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService5"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService5"/>
        /// </summary>
        global::MyCode.ITestService5 TestService5 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestModuleService"/><br />
        /// Implementation type: <see cref="global::MyCode.TestModuleService"/>
        /// </summary>
        global::MyCode.TestModuleService TestModuleService { get; }
    }
}
