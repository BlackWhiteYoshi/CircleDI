// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 4<br />
/// - Singleton: 1<br />
/// - Scoped: 1<br />
/// - Transient: 1<br />
/// - Delegate: 1
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TTestProvider : global::MyCode.ITTestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TTestProvider() {
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITTestProvider.IScope CreateScope() {
        return new global::MyCode.TTestProvider.Scope(this);
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITTestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TTestProvider"/>
    /// </summary>
    public global::MyCode.ITTestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService"/>
    /// </summary>
    public global::MyCode.ITestService TestService {
        get {
            global::MyCode.TestService testService_0 = new global::MyCode.TestService();
            return testService_0;
        }
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.DelegateAttribute{TService}">Delegate</see><br />
    /// Service type: <see cref="global::MyCode.SomeAction"/><br />
    /// Implementation type: <see cref="global::MyCode.SomeAction"/>
    /// </summary>
    public global::MyCode.SomeAction SomeAction => global::MyCode.ITestModule<T>.MyAction;


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "SomeAction":
                if (serviceType == typeof(global::MyCode.SomeAction))
                    return SomeAction;
                return null;
            case "ITestService":
                if (serviceType == typeof(global::MyCode.ITestService))
                    return TestService;
                return null;
            case "ITTestProvider":
                if (serviceType == typeof(global::MyCode.ITTestProvider))
                    return Self;
                return null;
            default:
                return null;
        }
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 4<br />
    /// - Singleton: 1<br />
    /// - Scoped: 1<br />
    /// - Transient: 1<br />
    /// - Delegate: 1
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITTestProvider.IScope, IServiceProvider {
        private readonly global::MyCode.TTestProvider _tTestProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="tTestProvider">An instance of the service provider this provider is the scope of. It must be an instance of <see cref="TTestProvider"/>.</param>
        public Scope(global::MyCode.ITTestProvider tTestProvider) {
            _tTestProvider = (global::MyCode.TTestProvider)tTestProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITTestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TTestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITTestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITTestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TTestProvider"/>
        /// </summary>
        public global::MyCode.ITTestProvider Self => _tTestProvider.Self;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService"/>
        /// </summary>
        public global::MyCode.ITestService TestService {
            get {
                global::MyCode.TestService testService_0 = new global::MyCode.TestService();
                return testService_0;
            }
        }


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.DelegateAttribute{TService}">Delegate</see><br />
        /// Service type: <see cref="global::MyCode.SomeAction"/><br />
        /// Implementation type: <see cref="global::MyCode.SomeAction"/>
        /// </summary>
        public global::MyCode.SomeAction SomeAction => global::MyCode.ITestModule<T>.MyAction;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITTestProvider.IScope))
                        return SelfScope;
                    return null;
                case "SomeAction":
                    if (serviceType == typeof(global::MyCode.SomeAction))
                        return SomeAction;
                    return null;
                case "ITestService":
                    if (serviceType == typeof(global::MyCode.ITestService))
                        return TestService;
                    return null;
                case "ITTestProvider":
                    if (serviceType == typeof(global::MyCode.ITTestProvider))
                        return Self;
                    return null;
                default:
                    return null;
            }
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 4<br />
/// - Singleton: 1<br />
/// - Scoped: 1<br />
/// - Transient: 1<br />
/// - Delegate: 1
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public partial interface ITTestProvider : IDisposable, IAsyncDisposable {
    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    global::MyCode.ITTestProvider.IScope CreateScope();

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.DelegateAttribute{TService}">Delegate</see><br />
    /// Service type: <see cref="global::MyCode.SomeAction"/><br />
    /// Implementation type: <see cref="global::MyCode.SomeAction"/>
    /// </summary>
    global::MyCode.SomeAction SomeAction { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService"/>
    /// </summary>
    global::MyCode.ITestService TestService { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITTestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TTestProvider"/>
    /// </summary>
    global::MyCode.ITTestProvider Self { get; }


    /// <summary>
    /// <para>
    /// Number of services registered: 4<br />
    /// - Singleton: 1<br />
    /// - Scoped: 1<br />
    /// - Transient: 1<br />
    /// - Delegate: 1
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public partial interface IScope : IDisposable, IAsyncDisposable {
        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITTestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TTestProvider.Scope"/>
        /// </summary>
        global::MyCode.ITTestProvider.IScope SelfScope { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.DelegateAttribute{TService}">Delegate</see><br />
        /// Service type: <see cref="global::MyCode.SomeAction"/><br />
        /// Implementation type: <see cref="global::MyCode.SomeAction"/>
        /// </summary>
        global::MyCode.SomeAction SomeAction { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService"/>
        /// </summary>
        global::MyCode.ITestService TestService { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITTestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TTestProvider"/>
        /// </summary>
        global::MyCode.ITTestProvider Self { get; }
    }
}
