// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 7<br />
/// - Singleton: 6<br />
/// - Scoped: 1<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _testService5 = new global::MyCode.TestService5() {
            TestService1 = default!
        };
        _testService4 = new global::MyCode.TestService4(TestService5);
        _testService3 = new global::MyCode.TestService3(TestService4);
        _testService2 = new global::MyCode.TestService2(TestService3);
        _testService1 = new global::MyCode.TestService1(TestService2);

        Set_TestService5_TestService1(_testService5, TestService1);
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() => new global::MyCode.TestProvider.Scope(Self);


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService1"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService1"/>
    /// </summary>
    public global::MyCode.ITestService1 TestService1 => _testService1;
    private global::MyCode.TestService1 _testService1;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService2"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService2"/>
    /// </summary>
    public global::MyCode.ITestService2 TestService2 => _testService2;
    private global::MyCode.TestService2 _testService2;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService3"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService3"/>
    /// </summary>
    public global::MyCode.ITestService3 TestService3 => _testService3;
    private global::MyCode.TestService3 _testService3;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService4"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService4"/>
    /// </summary>
    public global::MyCode.ITestService4 TestService4 => _testService4;
    private global::MyCode.TestService4 _testService4;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService5"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService5"/>
    /// </summary>
    public global::MyCode.ITestService5 TestService5 => _testService5;
    private global::MyCode.TestService5 _testService5;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            case "ITestService1":
                if (serviceType == typeof(global::MyCode.ITestService1))
                    return TestService1;
                return null;
            case "ITestService2":
                if (serviceType == typeof(global::MyCode.ITestService2))
                    return TestService2;
                return null;
            case "ITestService3":
                if (serviceType == typeof(global::MyCode.ITestService3))
                    return TestService3;
                return null;
            case "ITestService4":
                if (serviceType == typeof(global::MyCode.ITestService4))
                    return TestService4;
                return null;
            case "ITestService5":
                if (serviceType == typeof(global::MyCode.ITestService5))
                    return TestService5;
                return null;
            default:
                return null;
        }
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }


    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_TestService1")]
    private extern static void Set_TestService5_TestService1(global::MyCode.TestService5 instance, global::MyCode.ITestService1 value);



    /// <summary>
    /// <para>
    /// Number of services registered: 7<br />
    /// - Singleton: 6<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private global::MyCode.ITestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = testProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService1"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService1"/>
        /// </summary>
        public global::MyCode.ITestService1 TestService1 => _testProvider.TestService1;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService2"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService2"/>
        /// </summary>
        public global::MyCode.ITestService2 TestService2 => _testProvider.TestService2;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService3"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService3"/>
        /// </summary>
        public global::MyCode.ITestService3 TestService3 => _testProvider.TestService3;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService4"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService4"/>
        /// </summary>
        public global::MyCode.ITestService4 TestService4 => _testProvider.TestService4;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService5"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService5"/>
        /// </summary>
        public global::MyCode.ITestService5 TestService5 => _testProvider.TestService5;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                case "ITestService1":
                    if (serviceType == typeof(global::MyCode.ITestService1))
                        return TestService1;
                    return null;
                case "ITestService2":
                    if (serviceType == typeof(global::MyCode.ITestService2))
                        return TestService2;
                    return null;
                case "ITestService3":
                    if (serviceType == typeof(global::MyCode.ITestService3))
                        return TestService3;
                    return null;
                case "ITestService4":
                    if (serviceType == typeof(global::MyCode.ITestService4))
                        return TestService4;
                    return null;
                case "ITestService5":
                    if (serviceType == typeof(global::MyCode.ITestService5))
                        return TestService5;
                    return null;
                default:
                    return null;
            }
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }
    }
}
