// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 7<br />
/// - Singleton: 6<br />
/// - Scoped: 1<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _service5 = new global::MyCode.Service5() {
            Service1 = default!,
            Service2 = default!,
            Service3 = default!,
            Service4 = default!
        };
        _service4 = new global::MyCode.Service4() {
            Service1 = default!,
            Service2 = default!,
            Service3 = default!,
            Service5 = Service5
        };
        _service3 = new global::MyCode.Service3() {
            Service1 = default!,
            Service2 = default!,
            Service4 = Service4,
            Service5 = Service5
        };
        _service2 = new global::MyCode.Service2() {
            Service1 = default!,
            Service3 = Service3,
            Service4 = Service4,
            Service5 = Service5
        };
        _service1 = new global::MyCode.Service1() {
            Service2 = Service2,
            Service3 = Service3,
            Service4 = Service4,
            Service5 = Service5
        };

        Set_Service5_Service1(_service5, Service1);
        Set_Service5_Service2(_service5, Service2);
        Set_Service5_Service3(_service5, Service3);
        Set_Service5_Service4(_service5, Service4);
        Set_Service4_Service1(_service4, Service1);
        Set_Service4_Service2(_service4, Service2);
        Set_Service4_Service3(_service4, Service3);
        Set_Service3_Service1(_service3, Service1);
        Set_Service3_Service2(_service3, Service2);
        Set_Service2_Service1(_service2, Service1);
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() => new global::MyCode.TestProvider.Scope(Self);


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.Service1"/><br />
    /// Implementation type: <see cref="global::MyCode.Service1"/>
    /// </summary>
    public global::MyCode.Service1 Service1 => _service1;
    private global::MyCode.Service1 _service1;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.Service2"/><br />
    /// Implementation type: <see cref="global::MyCode.Service2"/>
    /// </summary>
    public global::MyCode.Service2 Service2 => _service2;
    private global::MyCode.Service2 _service2;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.Service3"/><br />
    /// Implementation type: <see cref="global::MyCode.Service3"/>
    /// </summary>
    public global::MyCode.Service3 Service3 => _service3;
    private global::MyCode.Service3 _service3;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.Service4"/><br />
    /// Implementation type: <see cref="global::MyCode.Service4"/>
    /// </summary>
    public global::MyCode.Service4 Service4 => _service4;
    private global::MyCode.Service4 _service4;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.Service5"/><br />
    /// Implementation type: <see cref="global::MyCode.Service5"/>
    /// </summary>
    public global::MyCode.Service5 Service5 => _service5;
    private global::MyCode.Service5 _service5;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "Service1":
                if (serviceType == typeof(global::MyCode.Service1))
                    return Service1;
                return null;
            case "Service2":
                if (serviceType == typeof(global::MyCode.Service2))
                    return Service2;
                return null;
            case "Service3":
                if (serviceType == typeof(global::MyCode.Service3))
                    return Service3;
                return null;
            case "Service4":
                if (serviceType == typeof(global::MyCode.Service4))
                    return Service4;
                return null;
            case "Service5":
                if (serviceType == typeof(global::MyCode.Service5))
                    return Service5;
                return null;
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            default:
                return null;
        }
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 7<br />
    /// - Singleton: 6<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private global::MyCode.ITestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = testProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.Service1"/><br />
        /// Implementation type: <see cref="global::MyCode.Service1"/>
        /// </summary>
        public global::MyCode.Service1 Service1 => _testProvider.Service1;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.Service2"/><br />
        /// Implementation type: <see cref="global::MyCode.Service2"/>
        /// </summary>
        public global::MyCode.Service2 Service2 => _testProvider.Service2;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.Service3"/><br />
        /// Implementation type: <see cref="global::MyCode.Service3"/>
        /// </summary>
        public global::MyCode.Service3 Service3 => _testProvider.Service3;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.Service4"/><br />
        /// Implementation type: <see cref="global::MyCode.Service4"/>
        /// </summary>
        public global::MyCode.Service4 Service4 => _testProvider.Service4;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.Service5"/><br />
        /// Implementation type: <see cref="global::MyCode.Service5"/>
        /// </summary>
        public global::MyCode.Service5 Service5 => _testProvider.Service5;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "Service1":
                    if (serviceType == typeof(global::MyCode.Service1))
                        return Service1;
                    return null;
                case "Service2":
                    if (serviceType == typeof(global::MyCode.Service2))
                        return Service2;
                    return null;
                case "Service3":
                    if (serviceType == typeof(global::MyCode.Service3))
                        return Service3;
                    return null;
                case "Service4":
                    if (serviceType == typeof(global::MyCode.Service4))
                        return Service4;
                    return null;
                case "Service5":
                    if (serviceType == typeof(global::MyCode.Service5))
                        return Service5;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                default:
                    return null;
            }
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }
    }



    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service1")]
    private extern static void Set_Service2_Service1(global::MyCode.Service2 instance, global::MyCode.Service1 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service1")]
    private extern static void Set_Service3_Service1(global::MyCode.Service3 instance, global::MyCode.Service1 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service2")]
    private extern static void Set_Service3_Service2(global::MyCode.Service3 instance, global::MyCode.Service2 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service1")]
    private extern static void Set_Service4_Service1(global::MyCode.Service4 instance, global::MyCode.Service1 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service2")]
    private extern static void Set_Service4_Service2(global::MyCode.Service4 instance, global::MyCode.Service2 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service3")]
    private extern static void Set_Service4_Service3(global::MyCode.Service4 instance, global::MyCode.Service3 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service1")]
    private extern static void Set_Service5_Service1(global::MyCode.Service5 instance, global::MyCode.Service1 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service2")]
    private extern static void Set_Service5_Service2(global::MyCode.Service5 instance, global::MyCode.Service2 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service3")]
    private extern static void Set_Service5_Service3(global::MyCode.Service5 instance, global::MyCode.Service3 value);

    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Service4")]
    private extern static void Set_Service5_Service4(global::MyCode.Service5 instance, global::MyCode.Service4 value);
}
