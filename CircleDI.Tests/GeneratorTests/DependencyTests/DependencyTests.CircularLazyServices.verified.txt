// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 4<br />
/// - Singleton: 3<br />
/// - Scoped: 1<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() {
        return new global::MyCode.TestProvider.Scope(this);
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService1"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService1"/>
    /// </summary>
    public global::MyCode.ITestService1 TestService1 {
        get {
            if (_testService1 is null) {
                lock (this)
                    if (_testService1 is null) {
                        _testService2 ??= new global::MyCode.TestService2() {
                            TestService1 = default!
                        };
                        _testService1 = new global::MyCode.TestService1(_testService2);
                    }
                Set_TestService2_TestService1(_testService2, _testService1);
            }
            return (global::MyCode.ITestService1)_testService1;
        }
    }
    private global::MyCode.TestService1? _testService1;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService2"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService2"/>
    /// </summary>
    public global::MyCode.ITestService2 TestService2 {
        get {
            if (_testService2 is null) {
                lock (this)
                    if (_testService2 is null) {
                        _testService2 = new global::MyCode.TestService2() {
                            TestService1 = default!
                        };
                        _testService1 ??= new global::MyCode.TestService1(_testService2);
                    }
                Set_TestService2_TestService1(_testService2, _testService1);
            }
            return (global::MyCode.ITestService2)_testService2;
        }
    }
    private global::MyCode.TestService2? _testService2;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            case "ITestService1":
                if (serviceType == typeof(global::MyCode.ITestService1))
                    return TestService1;
                return null;
            case "ITestService2":
                if (serviceType == typeof(global::MyCode.ITestService2))
                    return TestService2;
                return null;
            default:
                return null;
        }
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 4<br />
    /// - Singleton: 3<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private global::MyCode.TestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of. It must be an instance of <see cref="TestProvider"/>.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = (global::MyCode.TestProvider)testProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService1"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService1"/>
        /// </summary>
        public global::MyCode.ITestService1 TestService1 => _testProvider.TestService1;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService2"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService2"/>
        /// </summary>
        public global::MyCode.ITestService2 TestService2 => _testProvider.TestService2;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                case "ITestService1":
                    if (serviceType == typeof(global::MyCode.ITestService1))
                        return TestService1;
                    return null;
                case "ITestService2":
                    if (serviceType == typeof(global::MyCode.ITestService2))
                        return TestService2;
                    return null;
                default:
                    return null;
            }
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }
    }



    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_TestService1")]
    private extern static void Set_TestService2_TestService1(global::MyCode.TestService2 instance, global::MyCode.ITestService1 value);
}
