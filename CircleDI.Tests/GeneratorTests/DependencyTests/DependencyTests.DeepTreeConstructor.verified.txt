// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 11<br />
/// - Singleton: 2<br />
/// - Scoped: 5<br />
/// - Transient: 4<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    private readonly global::System.Object _lock = new();

    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _asyncDisposeList = [];
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() {
        return new global::MyCode.TestProvider.Scope(this);
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.S2"/><br />
    /// Implementation type: <see cref="global::MyCode.S2"/>
    /// </summary>
    public global::MyCode.S2 S2 {
        get {
            if (_s2 is null)
                lock (_lock)
                    if (_s2 is null) {
                        global::MyCode.T3 t3 = new global::MyCode.T3();
                        _s2 = new global::MyCode.S2(t3);
                        lock (_asyncDisposeList_lock) {
                            _asyncDisposeList.Add(t3);
                        }
                    }
            return _s2;
        }
    }
    private global::MyCode.S2? _s2;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.T3"/><br />
    /// Implementation type: <see cref="global::MyCode.T3"/>
    /// </summary>
    public global::MyCode.T3 T3 {
        get {
            global::MyCode.T3 t3 = new global::MyCode.T3();
            lock (_asyncDisposeList_lock) {
                _asyncDisposeList.Add(t3);
            }
            return t3;
        }
    }


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "S2":
                if (serviceType == typeof(global::MyCode.S2))
                    return S2;
                return null;
            case "T3":
                if (serviceType == typeof(global::MyCode.T3))
                    return T3;
                return null;
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            default:
                return null;
        }
    }


    private readonly global::System.Collections.Generic.List<IAsyncDisposable> _asyncDisposeList;
    private readonly global::System.Object _asyncDisposeList_lock = new();

    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
        lock (_asyncDisposeList_lock)
            foreach (IAsyncDisposable asyncDisposable in _asyncDisposeList)
                if (asyncDisposable is IDisposable disposable)
                    disposable.Dispose();
                else
                    _ = asyncDisposable.DisposeAsync().Preserve();
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        Task[] disposeTasks = new Task[_asyncDisposeList.Count];

        int index = 0;
        lock (_asyncDisposeList_lock)
            foreach (IAsyncDisposable asyncDisposable in _asyncDisposeList)
                disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

        return new ValueTask(Task.WhenAll(disposeTasks));
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 11<br />
    /// - Singleton: 2<br />
    /// - Scoped: 5<br />
    /// - Transient: 4<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private readonly global::MyCode.TestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of. It must be an instance of <see cref="TestProvider"/>.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = (global::MyCode.TestProvider)testProvider;

            _s3_1 = new global::MyCode.S3_1();
            _s3_2 = new global::MyCode.S3_2();
            global::MyCode.T3 t3 = new global::MyCode.T3();
            global::MyCode.T2 t2_1 = new global::MyCode.T2(_s3_1, _s3_2, t3);
            global::MyCode.T15 t15_2 = new global::MyCode.T15(t2_1) {
                Root = default!
            };
            global::MyCode.T1 t1_3 = new global::MyCode.T1(t15_2);
            global::MyCode.T3 t3_4 = new global::MyCode.T3();
            global::MyCode.T2 t2_5 = new global::MyCode.T2(_s3_1, _s3_2, t3_4);
            if (_testProvider._s2 is null)
                lock (_testProvider._lock)
                    if (_testProvider._s2 is null) {
                        global::MyCode.T3 t3_6 = new global::MyCode.T3();
                        _testProvider._s2 = new global::MyCode.S2(t3_6);
                        lock (_testProvider._asyncDisposeList_lock) {
                            _testProvider._asyncDisposeList.Add(t3_6);
                        }
                    }
            _s1 = new global::MyCode.S1(t2_5, _testProvider._s2);
            _root = new global::MyCode.Root(t1_3, _s1);

            Set_T15_Root(t15_2, _root);

            _asyncDisposeList = [
                t3,
                t3_4
            ];
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IRoot"/><br />
        /// Implementation type: <see cref="global::MyCode.Root"/>
        /// </summary>
        public global::MyCode.IRoot Root => _root;
        private readonly global::MyCode.Root _root;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.S1"/><br />
        /// Implementation type: <see cref="global::MyCode.S1"/>
        /// </summary>
        public global::MyCode.S1 S1 => _s1;
        private readonly global::MyCode.S1 _s1;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.S3_1"/><br />
        /// Implementation type: <see cref="global::MyCode.S3_1"/>
        /// </summary>
        public global::MyCode.S3_1 S3_1 => _s3_1;
        private readonly global::MyCode.S3_1 _s3_1;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.S3_2"/><br />
        /// Implementation type: <see cref="global::MyCode.S3_2"/>
        /// </summary>
        public global::MyCode.S3_2 S3_2 => _s3_2;
        private readonly global::MyCode.S3_2 _s3_2;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.S2"/><br />
        /// Implementation type: <see cref="global::MyCode.S2"/>
        /// </summary>
        public global::MyCode.S2 S2 => _testProvider.S2;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.T1"/><br />
        /// Implementation type: <see cref="global::MyCode.T1"/>
        /// </summary>
        public global::MyCode.T1 T1 {
            get {
                global::MyCode.T3 t3 = new global::MyCode.T3();
                global::MyCode.T2 t2_1 = new global::MyCode.T2(_s3_1, _s3_2, t3);
                global::MyCode.T15 t15_2 = new global::MyCode.T15(t2_1) {
                    Root = default!
                };
                Set_T15_Root(t15_2, _root);
                global::MyCode.T1 t1_3 = new global::MyCode.T1(t15_2);
                lock (_asyncDisposeList_lock) {
                    _asyncDisposeList.Add(t3);
                }
                return t1_3;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.T15"/><br />
        /// Implementation type: <see cref="global::MyCode.T15"/>
        /// </summary>
        public global::MyCode.T15 T15 {
            get {
                global::MyCode.T3 t3 = new global::MyCode.T3();
                global::MyCode.T2 t2_1 = new global::MyCode.T2(_s3_1, _s3_2, t3);
                global::MyCode.T15 t15_2 = new global::MyCode.T15(t2_1) {
                    Root = default!
                };
                Set_T15_Root(t15_2, _root);
                lock (_asyncDisposeList_lock) {
                    _asyncDisposeList.Add(t3);
                }
                return t15_2;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.T2"/><br />
        /// Implementation type: <see cref="global::MyCode.T2"/>
        /// </summary>
        public global::MyCode.T2 T2 {
            get {
                global::MyCode.T3 t3 = new global::MyCode.T3();
                global::MyCode.T2 t2_1 = new global::MyCode.T2(_s3_1, _s3_2, t3);
                lock (_asyncDisposeList_lock) {
                    _asyncDisposeList.Add(t3);
                }
                return t2_1;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.T3"/><br />
        /// Implementation type: <see cref="global::MyCode.T3"/>
        /// </summary>
        public global::MyCode.T3 T3 {
            get {
                global::MyCode.T3 t3 = new global::MyCode.T3();
                lock (_asyncDisposeList_lock) {
                    _asyncDisposeList.Add(t3);
                }
                return t3;
            }
        }


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "S1":
                    if (serviceType == typeof(global::MyCode.S1))
                        return S1;
                    return null;
                case "S2":
                    if (serviceType == typeof(global::MyCode.S2))
                        return S2;
                    return null;
                case "T1":
                    if (serviceType == typeof(global::MyCode.T1))
                        return T1;
                    return null;
                case "T2":
                    if (serviceType == typeof(global::MyCode.T2))
                        return T2;
                    return null;
                case "T3":
                    if (serviceType == typeof(global::MyCode.T3))
                        return T3;
                    return null;
                case "T15":
                    if (serviceType == typeof(global::MyCode.T15))
                        return T15;
                    return null;
                case "S3_1":
                    if (serviceType == typeof(global::MyCode.S3_1))
                        return S3_1;
                    return null;
                case "S3_2":
                    if (serviceType == typeof(global::MyCode.S3_2))
                        return S3_2;
                    return null;
                case "IRoot":
                    if (serviceType == typeof(global::MyCode.IRoot))
                        return Root;
                    return null;
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                default:
                    return null;
            }
        }


        private readonly global::System.Collections.Generic.List<IAsyncDisposable> _asyncDisposeList;
        private readonly global::System.Object _asyncDisposeList_lock = new();

        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
            lock (_asyncDisposeList_lock)
                foreach (IAsyncDisposable asyncDisposable in _asyncDisposeList)
                    if (asyncDisposable is IDisposable disposable)
                        disposable.Dispose();
                    else
                        _ = asyncDisposable.DisposeAsync().Preserve();
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            Task[] disposeTasks = new Task[_asyncDisposeList.Count];

            int index = 0;
            lock (_asyncDisposeList_lock)
                foreach (IAsyncDisposable asyncDisposable in _asyncDisposeList)
                    disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

            return new ValueTask(Task.WhenAll(disposeTasks));
        }
    }



    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_Root")]
    private extern static void Set_T15_Root(global::MyCode.T15 instance, global::MyCode.IRoot value);
}
