// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 4<br />
/// - Singleton: 1<br />
/// - Scoped: 1<br />
/// - Transient: 2<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() => new global::MyCode.TestProvider.Scope(Self);


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService1"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService1"/>
    /// </summary>
    public global::MyCode.ITestService1 GetTestService1() {
        global::MyCode.TestService1 testService1 = new global::MyCode.TestService1() {
            TestService2 = TestService2
        };
        lock (disposeList)
            disposeList.Add(testService1);
        return testService1;
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService2"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService2"/>
    /// </summary>
    public global::MyCode.ITestService2 TestService2 {
        get {
            global::MyCode.TestService2 testService2 = new global::MyCode.TestService2();
            lock (disposeList)
                disposeList.Add(testService2);
            return testService2;
        }
    }


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        if (serviceType == typeof(global::MyCode.ITestProvider))
            return Self;
        if (serviceType == typeof(global::MyCode.ITestService1))
            return GetTestService1();
        if (serviceType == typeof(global::MyCode.ITestService2))
            return TestService2;
        return null;
    }


    private global::System.Collections.Generic.List<IDisposable> disposeList = [];

    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
        lock (disposeList)
            foreach (IDisposable disposable in disposeList)
                disposable.Dispose();
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        lock (disposeList)
            foreach (IDisposable disposable in disposeList)
                disposable.Dispose();

        return default;
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 4<br />
    /// - Singleton: 1<br />
    /// - Scoped: 1<br />
    /// - Transient: 2<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private global::MyCode.ITestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = testProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService1"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService1"/>
        /// </summary>
        public global::MyCode.ITestService1 GetTestService1() {
            global::MyCode.TestService1 testService1 = new global::MyCode.TestService1() {
                TestService2 = TestService2
            };
            lock (disposeList)
                disposeList.Add(testService1);
            return testService1;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService2"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService2"/>
        /// </summary>
        public global::MyCode.ITestService2 TestService2 {
            get {
                global::MyCode.TestService2 testService2 = new global::MyCode.TestService2();
                lock (disposeList)
                    disposeList.Add(testService2);
                return testService2;
            }
        }


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                return SelfScope;
            if (serviceType == typeof(global::MyCode.ITestProvider))
                return Self;
            if (serviceType == typeof(global::MyCode.ITestService1))
                return GetTestService1();
            if (serviceType == typeof(global::MyCode.ITestService2))
                return TestService2;
            return null;
        }


        private global::System.Collections.Generic.List<IDisposable> disposeList = [];

        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
            lock (disposeList)
                foreach (IDisposable disposable in disposeList)
                    disposable.Dispose();
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            lock (disposeList)
                foreach (IDisposable disposable in disposeList)
                    disposable.Dispose();

            return default;
        }
    }
}
