// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 4<br />
/// - Singleton: 1<br />
/// - Scoped: 1<br />
/// - Transient: 2<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is not thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of <see cref="global::MyCode.TestProvider"/> together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
    }

    /// <summary>
    /// Creates an instance of <see cref="global::MyCode.TestProvider.Scope"/> together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() => new global::MyCode.TestProvider.Scope(Self);


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type:  <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService"/><br />
    /// Implementation type:  <see cref="global::MyCode.TestService"/>
    /// </summary>
    public global::MyCode.ITestService TestService {
        get {
            global::MyCode.TestService testService = new global::MyCode.TestService();
            disposeList.Add(testService);
            return testService;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService2"/><br />
    /// Implementation type:  <see cref="global::MyCode.TestService2"/>
    /// </summary>
    public global::MyCode.ITestService2 TestService2 {
        get {
            global::MyCode.TestService2 testService2 = new global::MyCode.TestService2();
            asyncDisposeList.Add(testService2);
            return testService2;
        }
    }


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        if (serviceType == typeof(global::MyCode.ITestProvider))
            return Self;
        if (serviceType == typeof(global::MyCode.ITestService))
            return TestService;
        if (serviceType == typeof(global::MyCode.ITestService2))
            return TestService2;
        return null;
    }


    private global::System.Collections.Generic.List<IDisposable> disposeList = [];

    private global::System.Collections.Generic.List<IAsyncDisposable> asyncDisposeList = [];

    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
        foreach (IDisposable disposable in disposeList)
            disposable.Dispose();

        foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
            if (asyncDisposable is IDisposable disposable)
                disposable.Dispose();
            else
                _ = asyncDisposable.DisposeAsync().Preserve();
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        foreach (IDisposable disposable in disposeList)
            disposable.Dispose();

        Task[] disposeTasks = new Task[asyncDisposeList.Count];

        int index = 0;
        foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
            disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

        return new ValueTask(Task.WhenAll(disposeTasks));
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 4<br />
    /// - Singleton: 1<br />
    /// - Scoped: 1<br />
    /// - Transient: 2<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is not thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : ITestProvider.IScope, IServiceProvider {
        private ITestProvider __serviceProvider;

        /// <summary>
        /// Creates an instance of <see cref="global::MyCode.TestProvider.Scope"/> together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="serviceProvider">An instance of the service provider this provider is the scope of.</param>
        public Scope(ITestProvider serviceProvider) {
            __serviceProvider = serviceProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type:  <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type:  <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => __serviceProvider.Self;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService"/><br />
        /// Implementation type:  <see cref="global::MyCode.TestService"/>
        /// </summary>
        public global::MyCode.ITestService TestService {
            get {
                global::MyCode.TestService testService = new global::MyCode.TestService();
                disposeList.Add(testService);
                return testService;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService2"/><br />
        /// Implementation type:  <see cref="global::MyCode.TestService2"/>
        /// </summary>
        public global::MyCode.ITestService2 TestService2 {
            get {
                global::MyCode.TestService2 testService2 = new global::MyCode.TestService2();
                asyncDisposeList.Add(testService2);
                return testService2;
            }
        }


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            if (serviceType == typeof(global::MyCode.ITestProvider))
                return Self;
            if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                return SelfScope;
            if (serviceType == typeof(global::MyCode.ITestService))
                return TestService;
            if (serviceType == typeof(global::MyCode.ITestService2))
                return TestService2;
            return null;
        }


        private global::System.Collections.Generic.List<IDisposable> disposeList = [];

        private global::System.Collections.Generic.List<IAsyncDisposable> asyncDisposeList = [];

        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
            foreach (IDisposable disposable in disposeList)
                disposable.Dispose();

            foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                if (asyncDisposable is IDisposable disposable)
                    disposable.Dispose();
                else
                    _ = asyncDisposable.DisposeAsync().Preserve();
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            foreach (IDisposable disposable in disposeList)
                disposable.Dispose();

            Task[] disposeTasks = new Task[asyncDisposeList.Count];

            int index = 0;
            foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

            return new ValueTask(Task.WhenAll(disposeTasks));
        }
    }
}
