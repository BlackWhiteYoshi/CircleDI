// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 14<br />
/// - Singleton: 7<br />
/// - Scoped: 1<br />
/// - Transient: 6<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _testService1 = new global::MyCode.TestService1();
        _testService2 = new global::MyCode.TestService2();
        _testService3 = new global::MyCode.TestService3();
        _testService4 = new global::MyCode.TestService4();
        _testService5 = new global::MyCode.TestService5();
        _testService6 = new global::MyCode.TestService6();
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() => new global::MyCode.TestProvider.Scope(Self);


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService1"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService1"/>
    /// </summary>
    public global::MyCode.ITestService1 TestService1 => _testService1;
    private global::MyCode.TestService1 _testService1;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService2"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService2"/>
    /// </summary>
    public global::MyCode.ITestService2 TestService2 => _testService2;
    private global::MyCode.TestService2 _testService2;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService3"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService3"/>
    /// </summary>
    public global::MyCode.ITestService3 TestService3 => _testService3;
    private global::MyCode.TestService3 _testService3;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService4"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService4"/>
    /// </summary>
    public global::MyCode.ITestService4 TestService4 => _testService4;
    private global::MyCode.TestService4 _testService4;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService5"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService5"/>
    /// </summary>
    public global::MyCode.ITestService5 TestService5 => _testService5;
    private global::MyCode.TestService5 _testService5;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestService6"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService6"/>
    /// </summary>
    public global::MyCode.ITestService6 TestService6 => _testService6;
    private global::MyCode.TestService6 _testService6;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService7"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService7"/>
    /// </summary>
    public global::MyCode.ITestService7 TestService7 {
        get {
            global::MyCode.TestService7 testService7 = new global::MyCode.TestService7();
            lock (disposeList)
                disposeList.Add(testService7);
            return testService7;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService8"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService8"/>
    /// </summary>
    public global::MyCode.ITestService8 TestService8 {
        get {
            global::MyCode.TestService8 testService8 = new global::MyCode.TestService8();
            lock (disposeList)
                disposeList.Add(testService8);
            return testService8;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService9"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService9"/>
    /// </summary>
    public global::MyCode.ITestService9 TestService9 {
        get {
            global::MyCode.TestService9 testService9 = new global::MyCode.TestService9();
            lock (asyncDisposeList)
                asyncDisposeList.Add(testService9);
            return testService9;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService10"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService10"/>
    /// </summary>
    public global::MyCode.ITestService10 TestService10 {
        get {
            global::MyCode.TestService10 testService10 = new global::MyCode.TestService10();
            lock (asyncDisposeList)
                asyncDisposeList.Add(testService10);
            return testService10;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService11"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService11"/>
    /// </summary>
    public global::MyCode.ITestService11 TestService11 {
        get {
            global::MyCode.TestService11 testService11 = new global::MyCode.TestService11();
            lock (asyncDisposeList)
                asyncDisposeList.Add(testService11);
            return testService11;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITestService12"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService12"/>
    /// </summary>
    public global::MyCode.ITestService12 TestService12 {
        get {
            global::MyCode.TestService12 testService12 = new global::MyCode.TestService12();
            lock (asyncDisposeList)
                asyncDisposeList.Add(testService12);
            return testService12;
        }
    }


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        if (serviceType == typeof(global::MyCode.ITestProvider))
            return Self;
        if (serviceType == typeof(global::MyCode.ITestService1))
            return TestService1;
        if (serviceType == typeof(global::MyCode.ITestService10))
            return TestService10;
        if (serviceType == typeof(global::MyCode.ITestService11))
            return TestService11;
        if (serviceType == typeof(global::MyCode.ITestService12))
            return TestService12;
        if (serviceType == typeof(global::MyCode.ITestService2))
            return TestService2;
        if (serviceType == typeof(global::MyCode.ITestService3))
            return TestService3;
        if (serviceType == typeof(global::MyCode.ITestService4))
            return TestService4;
        if (serviceType == typeof(global::MyCode.ITestService5))
            return TestService5;
        if (serviceType == typeof(global::MyCode.ITestService6))
            return TestService6;
        if (serviceType == typeof(global::MyCode.ITestService7))
            return TestService7;
        if (serviceType == typeof(global::MyCode.ITestService8))
            return TestService8;
        if (serviceType == typeof(global::MyCode.ITestService9))
            return TestService9;
        return null;
    }


    private global::System.Collections.Generic.List<IDisposable> disposeList = [];

    private global::System.Collections.Generic.List<IAsyncDisposable> asyncDisposeList = [];

    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
        ((IDisposable)_testService1).Dispose();
        ((IDisposable)_testService2).Dispose();
        _ = ((IAsyncDisposable)_testService3).DisposeAsync().Preserve();
        _ = ((IAsyncDisposable)_testService4).DisposeAsync().Preserve();
        ((IDisposable)_testService5).Dispose();
        ((IDisposable)_testService6).Dispose();

        lock (disposeList)
            foreach (IDisposable disposable in disposeList)
                disposable.Dispose();

        lock (asyncDisposeList)
            foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                if (asyncDisposable is IDisposable disposable)
                    disposable.Dispose();
                else
                    _ = asyncDisposable.DisposeAsync().Preserve();
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        ((IDisposable)_testService1).Dispose();
        ((IDisposable)_testService2).Dispose();

        lock (disposeList)
            foreach (IDisposable disposable in disposeList)
                disposable.Dispose();

        Task[] disposeTasks = new Task[4 + asyncDisposeList.Count];

        disposeTasks[0] = ((IAsyncDisposable)_testService3).DisposeAsync().AsTask();
        disposeTasks[1] = ((IAsyncDisposable)_testService4).DisposeAsync().AsTask();
        disposeTasks[2] = ((IAsyncDisposable)_testService5).DisposeAsync().AsTask();
        disposeTasks[3] = ((IAsyncDisposable)_testService6).DisposeAsync().AsTask();

        int index = 4;
        lock (asyncDisposeList)
            foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

        return new ValueTask(Task.WhenAll(disposeTasks));
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 14<br />
    /// - Singleton: 7<br />
    /// - Scoped: 1<br />
    /// - Transient: 6<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private global::MyCode.ITestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = testProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService1"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService1"/>
        /// </summary>
        public global::MyCode.ITestService1 TestService1 => _testProvider.TestService1;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService2"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService2"/>
        /// </summary>
        public global::MyCode.ITestService2 TestService2 => _testProvider.TestService2;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService3"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService3"/>
        /// </summary>
        public global::MyCode.ITestService3 TestService3 => _testProvider.TestService3;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService4"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService4"/>
        /// </summary>
        public global::MyCode.ITestService4 TestService4 => _testProvider.TestService4;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService5"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService5"/>
        /// </summary>
        public global::MyCode.ITestService5 TestService5 => _testProvider.TestService5;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestService6"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService6"/>
        /// </summary>
        public global::MyCode.ITestService6 TestService6 => _testProvider.TestService6;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService7"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService7"/>
        /// </summary>
        public global::MyCode.ITestService7 TestService7 {
            get {
                global::MyCode.TestService7 testService7 = new global::MyCode.TestService7();
                lock (disposeList)
                    disposeList.Add(testService7);
                return testService7;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService8"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService8"/>
        /// </summary>
        public global::MyCode.ITestService8 TestService8 {
            get {
                global::MyCode.TestService8 testService8 = new global::MyCode.TestService8();
                lock (disposeList)
                    disposeList.Add(testService8);
                return testService8;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService9"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService9"/>
        /// </summary>
        public global::MyCode.ITestService9 TestService9 {
            get {
                global::MyCode.TestService9 testService9 = new global::MyCode.TestService9();
                lock (asyncDisposeList)
                    asyncDisposeList.Add(testService9);
                return testService9;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService10"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService10"/>
        /// </summary>
        public global::MyCode.ITestService10 TestService10 {
            get {
                global::MyCode.TestService10 testService10 = new global::MyCode.TestService10();
                lock (asyncDisposeList)
                    asyncDisposeList.Add(testService10);
                return testService10;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService11"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService11"/>
        /// </summary>
        public global::MyCode.ITestService11 TestService11 {
            get {
                global::MyCode.TestService11 testService11 = new global::MyCode.TestService11();
                lock (asyncDisposeList)
                    asyncDisposeList.Add(testService11);
                return testService11;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITestService12"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService12"/>
        /// </summary>
        public global::MyCode.ITestService12 TestService12 {
            get {
                global::MyCode.TestService12 testService12 = new global::MyCode.TestService12();
                lock (asyncDisposeList)
                    asyncDisposeList.Add(testService12);
                return testService12;
            }
        }


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            if (serviceType == typeof(global::MyCode.ITestProvider))
                return Self;
            if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                return SelfScope;
            if (serviceType == typeof(global::MyCode.ITestService1))
                return TestService1;
            if (serviceType == typeof(global::MyCode.ITestService10))
                return TestService10;
            if (serviceType == typeof(global::MyCode.ITestService11))
                return TestService11;
            if (serviceType == typeof(global::MyCode.ITestService12))
                return TestService12;
            if (serviceType == typeof(global::MyCode.ITestService2))
                return TestService2;
            if (serviceType == typeof(global::MyCode.ITestService3))
                return TestService3;
            if (serviceType == typeof(global::MyCode.ITestService4))
                return TestService4;
            if (serviceType == typeof(global::MyCode.ITestService5))
                return TestService5;
            if (serviceType == typeof(global::MyCode.ITestService6))
                return TestService6;
            if (serviceType == typeof(global::MyCode.ITestService7))
                return TestService7;
            if (serviceType == typeof(global::MyCode.ITestService8))
                return TestService8;
            if (serviceType == typeof(global::MyCode.ITestService9))
                return TestService9;
            return null;
        }


        private global::System.Collections.Generic.List<IDisposable> disposeList = [];

        private global::System.Collections.Generic.List<IAsyncDisposable> asyncDisposeList = [];

        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
            lock (disposeList)
                foreach (IDisposable disposable in disposeList)
                    disposable.Dispose();

            lock (asyncDisposeList)
                foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                    if (asyncDisposable is IDisposable disposable)
                        disposable.Dispose();
                    else
                        _ = asyncDisposable.DisposeAsync().Preserve();
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            lock (disposeList)
                foreach (IDisposable disposable in disposeList)
                    disposable.Dispose();

            Task[] disposeTasks = new Task[asyncDisposeList.Count];

            int index = 0;
            lock (asyncDisposeList)
                foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                    disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

            return new ValueTask(Task.WhenAll(disposeTasks));
        }
    }
}
