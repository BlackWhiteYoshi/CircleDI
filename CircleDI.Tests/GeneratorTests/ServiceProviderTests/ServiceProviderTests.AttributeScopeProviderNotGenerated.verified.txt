// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 3<br />
/// - Singleton: 2<br />
/// - Scoped: 0<br />
/// - Transient: 1<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider has no scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of <see cref="global::MyCode.TestProvider"/> together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _singleton = new global::MyCode.Singleton();
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingleton"/><br />
    /// Implementation type: <see cref="global::MyCode.Singleton"/>
    /// </summary>
    public global::MyCode.ISingleton Singleton => _singleton;
    private global::MyCode.Singleton _singleton;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITransient"/><br />
    /// Implementation type: <see cref="global::MyCode.Transient"/>
    /// </summary>
    public global::MyCode.ITransient Transient => new global::MyCode.Transient();


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        if (serviceType == typeof(global::MyCode.ISingleton))
            return Singleton;
        if (serviceType == typeof(global::MyCode.ITestProvider))
            return Self;
        if (serviceType == typeof(global::MyCode.ITransient))
            return Transient;
        return null;
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 3<br />
/// - Singleton: 2<br />
/// - Scoped: 0<br />
/// - Transient: 1<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider has no scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public partial interface ITestProvider : IDisposable, IAsyncDisposable {
    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingleton"/><br />
    /// Implementation type: <see cref="global::MyCode.Singleton"/>
    /// </summary>
    global::MyCode.ISingleton Singleton { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    global::MyCode.ITestProvider Self { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITransient"/><br />
    /// Implementation type: <see cref="global::MyCode.Transient"/>
    /// </summary>
    global::MyCode.ITransient Transient { get; }
}
