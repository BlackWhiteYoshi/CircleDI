// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

partial class Wrapper {
    partial struct Data {
        partial interface Api {
            /// <summary>
            /// <para>
            /// Number of services registered: 2<br />
            /// - Singleton: 1<br />
            /// - Scoped: 1<br />
            /// - Transient: 0<br />
            /// - Delegate: 0
            /// </para>
            /// <para>
            /// This provider can create a scope,<br />
            /// implements both Dispose() and DisposeAsync() methods<br />
            /// and is thread safe.
            /// </para>
            /// </summary>
            public sealed partial class TestProvider : global::MyCode.Wrapper.Data.Api.ITestProvider, IServiceProvider {
                /// <summary>
                /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
                /// </summary>
                public TestProvider() {
                }

                /// <summary>
                /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
                /// </summary>
                public global::MyCode.Wrapper.Data.Api.ITestProvider.IScope CreateScope() {
                    return new global::MyCode.Wrapper.Data.Api.TestProvider.Scope(this);
                }


                /// <summary>
                /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
                /// Service type: <see cref="global::MyCode.Wrapper.Data.Api.ITestProvider"/><br />
                /// Implementation type: <see cref="global::MyCode.Wrapper.Data.Api.TestProvider"/>
                /// </summary>
                public global::MyCode.Wrapper.Data.Api.ITestProvider Self => this;


                /// <summary>
                /// <para>Finds all registered services of the given type.</para>
                /// <para>
                /// The method returns<br />
                /// - null (when registered zero times)<br />
                /// - given type (when registered ones)<br />
                /// - Array of given type (when registered many times)
                /// </para>
                /// </summary>
                object? IServiceProvider.GetService(Type serviceType) {
                    switch (serviceType.Name) {
                        case "ITestProvider":
                            if (serviceType == typeof(global::MyCode.Wrapper.Data.Api.ITestProvider))
                                return Self;
                            return null;
                        default:
                            return null;
                    }
                }


                /// <summary>
                /// Disposes all disposable services instantiated by this provider.
                /// </summary>
                public void Dispose() {
                }

                /// <summary>
                /// Disposes all disposable services instantiated by this provider asynchronously.
                /// </summary>
                public ValueTask DisposeAsync() {
                    return default;
                }



                /// <summary>
                /// <para>
                /// Number of services registered: 2<br />
                /// - Singleton: 1<br />
                /// - Scoped: 1<br />
                /// - Transient: 0<br />
                /// - Delegate: 0
                /// </para>
                /// <para>
                /// This provider can create a scope,<br />
                /// implements both Dispose() and DisposeAsync() methods<br />
                /// and is thread safe.
                /// </para>
                /// </summary>
                public sealed partial class Scope : global::MyCode.Wrapper.Data.Api.ITestProvider.IScope, IServiceProvider {
                    private readonly global::MyCode.Wrapper.Data.Api.TestProvider _testProvider;

                    /// <summary>
                    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
                    /// </summary>
                    /// <param name="testProvider">An instance of the service provider this provider is the scope of. It must be an instance of <see cref="TestProvider"/>.</param>
                    public Scope(global::MyCode.Wrapper.Data.Api.ITestProvider testProvider) {
                        _testProvider = (global::MyCode.Wrapper.Data.Api.TestProvider)testProvider;
                    }

                    /// <summary>
                    /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
                    /// Service type: <see cref="global::MyCode.Wrapper.Data.Api.ITestProvider.IScope"/><br />
                    /// Implementation type: <see cref="global::MyCode.Wrapper.Data.Api.TestProvider.Scope"/>
                    /// </summary>
                    public global::MyCode.Wrapper.Data.Api.ITestProvider.IScope SelfScope => this;


                    /// <summary>
                    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
                    /// Service type: <see cref="global::MyCode.Wrapper.Data.Api.ITestProvider"/><br />
                    /// Implementation type: <see cref="global::MyCode.Wrapper.Data.Api.TestProvider"/>
                    /// </summary>
                    public global::MyCode.Wrapper.Data.Api.ITestProvider Self => _testProvider.Self;


                    /// <summary>
                    /// <para>Finds all registered services of the given type.</para>
                    /// <para>
                    /// The method returns<br />
                    /// - null (when registered zero times)<br />
                    /// - given type (when registered ones)<br />
                    /// - Array of given type (when registered many times)
                    /// </para>
                    /// </summary>
                    object? IServiceProvider.GetService(Type serviceType) {
                        switch (serviceType.Name) {
                            case "IScope":
                                if (serviceType == typeof(global::MyCode.Wrapper.Data.Api.ITestProvider.IScope))
                                    return SelfScope;
                                return null;
                            case "ITestProvider":
                                if (serviceType == typeof(global::MyCode.Wrapper.Data.Api.ITestProvider))
                                    return Self;
                                return null;
                            default:
                                return null;
                        }
                    }


                    /// <summary>
                    /// Disposes all disposable services instantiated by this provider.
                    /// </summary>
                    public void Dispose() {
                    }

                    /// <summary>
                    /// Disposes all disposable services instantiated by this provider asynchronously.
                    /// </summary>
                    public ValueTask DisposeAsync() {
                        return default;
                    }
                }
            }
        }
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

partial class Wrapper {
    partial struct Data {
        partial interface Api {
            /// <summary>
            /// <para>
            /// Number of services registered: 2<br />
            /// - Singleton: 1<br />
            /// - Scoped: 1<br />
            /// - Transient: 0<br />
            /// - Delegate: 0
            /// </para>
            /// <para>
            /// This provider can create a scope,<br />
            /// implements both Dispose() and DisposeAsync() methods<br />
            /// and is thread safe.
            /// </para>
            /// </summary>
            public partial interface ITestProvider : IDisposable, IAsyncDisposable {
                /// <summary>
                /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
                /// </summary>
                global::MyCode.Wrapper.Data.Api.ITestProvider.IScope CreateScope();

                /// <summary>
                /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
                /// Service type: <see cref="global::MyCode.Wrapper.Data.Api.ITestProvider"/><br />
                /// Implementation type: <see cref="global::MyCode.Wrapper.Data.Api.TestProvider"/>
                /// </summary>
                global::MyCode.Wrapper.Data.Api.ITestProvider Self { get; }


                /// <summary>
                /// <para>
                /// Number of services registered: 2<br />
                /// - Singleton: 1<br />
                /// - Scoped: 1<br />
                /// - Transient: 0<br />
                /// - Delegate: 0
                /// </para>
                /// <para>
                /// This provider can create a scope,<br />
                /// implements both Dispose() and DisposeAsync() methods<br />
                /// and is thread safe.
                /// </para>
                /// </summary>
                public partial interface IScope : IDisposable, IAsyncDisposable {
                    /// <summary>
                    /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
                    /// Service type: <see cref="global::MyCode.Wrapper.Data.Api.ITestProvider.IScope"/><br />
                    /// Implementation type: <see cref="global::MyCode.Wrapper.Data.Api.TestProvider.Scope"/>
                    /// </summary>
                    global::MyCode.Wrapper.Data.Api.ITestProvider.IScope SelfScope { get; }

                    /// <summary>
                    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
                    /// Service type: <see cref="global::MyCode.Wrapper.Data.Api.ITestProvider"/><br />
                    /// Implementation type: <see cref="global::MyCode.Wrapper.Data.Api.TestProvider"/>
                    /// </summary>
                    global::MyCode.Wrapper.Data.Api.ITestProvider Self { get; }
                }
            }
        }
    }
}
