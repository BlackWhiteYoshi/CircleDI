// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 16<br />
/// - Singleton: 6<br />
/// - Scoped: 6<br />
/// - Transient: 3<br />
/// - Delegate: 1
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _singleton = new global::MyCode.Singleton();
        _singletonDisposable = new global::MyCode.SingletonDisposable();
        _singletonAsyncDisposable = new global::MyCode.SingletonAsyncDisposable();
        _singletonDependency2 = new global::MyCode.SingletonDependency2() {
            SingletonDependency1 = default!
        };
        _singletonDependency1 = new global::MyCode.SingletonDependency1(SingletonDependency2);

        Set_SingletonDependency2_SingletonDependency1(_singletonDependency2, SingletonDependency1);
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() => new global::MyCode.TestProvider.Scope(Self);


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingleton"/><br />
    /// Implementation type: <see cref="global::MyCode.Singleton"/>
    /// </summary>
    public global::MyCode.ISingleton Singleton => _singleton;
    private global::MyCode.Singleton _singleton;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingletonDisposable"/><br />
    /// Implementation type: <see cref="global::MyCode.SingletonDisposable"/>
    /// </summary>
    public global::MyCode.ISingletonDisposable SingletonDisposable => _singletonDisposable;
    private global::MyCode.SingletonDisposable _singletonDisposable;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingletonAsyncDisposable"/><br />
    /// Implementation type: <see cref="global::MyCode.SingletonAsyncDisposable"/>
    /// </summary>
    public global::MyCode.ISingletonAsyncDisposable SingletonAsyncDisposable => _singletonAsyncDisposable;
    private global::MyCode.SingletonAsyncDisposable _singletonAsyncDisposable;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingletonDependency1"/><br />
    /// Implementation type: <see cref="global::MyCode.SingletonDependency1"/>
    /// </summary>
    public global::MyCode.ISingletonDependency1 SingletonDependency1 => _singletonDependency1;
    private global::MyCode.SingletonDependency1 _singletonDependency1;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingletonDependency2"/><br />
    /// Implementation type: <see cref="global::MyCode.SingletonDependency2"/>
    /// </summary>
    public global::MyCode.ISingletonDependency2 SingletonDependency2 => _singletonDependency2;
    private global::MyCode.SingletonDependency2 _singletonDependency2;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITransient"/><br />
    /// Implementation type: <see cref="global::MyCode.Transient"/>
    /// </summary>
    public global::MyCode.ITransient Transient => new global::MyCode.Transient();

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITransientDisposable"/><br />
    /// Implementation type: <see cref="global::MyCode.TransientDisposable"/>
    /// </summary>
    public global::MyCode.ITransientDisposable TransientDisposable {
        get {
            global::MyCode.TransientDisposable transientDisposable = new global::MyCode.TransientDisposable();
            lock (disposeList)
                disposeList.Add(transientDisposable);
            return transientDisposable;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITransientAsyncDisposable"/><br />
    /// Implementation type: <see cref="global::MyCode.TransientAsyncDisposable"/>
    /// </summary>
    public global::MyCode.ITransientAsyncDisposable TransientAsyncDisposable {
        get {
            global::MyCode.TransientAsyncDisposable transientAsyncDisposable = new global::MyCode.TransientAsyncDisposable();
            lock (asyncDisposeList)
                asyncDisposeList.Add(transientAsyncDisposable);
            return transientAsyncDisposable;
        }
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.DelegateAttribute{TService}">Delegate</see><br />
    /// Service type: <see cref="global::MyCode.MyDelegate"/><br />
    /// Implementation type: <see cref="global::MyCode.MyDelegate"/>
    /// </summary>
    public global::MyCode.MyDelegate MyDelegate => DelegateImpl;


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        if (serviceType == typeof(global::MyCode.ISingleton))
            return Singleton;
        if (serviceType == typeof(global::MyCode.ISingletonAsyncDisposable))
            return SingletonAsyncDisposable;
        if (serviceType == typeof(global::MyCode.ISingletonDependency1))
            return SingletonDependency1;
        if (serviceType == typeof(global::MyCode.ISingletonDependency2))
            return SingletonDependency2;
        if (serviceType == typeof(global::MyCode.ISingletonDisposable))
            return SingletonDisposable;
        if (serviceType == typeof(global::MyCode.ITestProvider))
            return Self;
        if (serviceType == typeof(global::MyCode.ITransient))
            return Transient;
        if (serviceType == typeof(global::MyCode.ITransientAsyncDisposable))
            return TransientAsyncDisposable;
        if (serviceType == typeof(global::MyCode.ITransientDisposable))
            return TransientDisposable;
        if (serviceType == typeof(global::MyCode.MyDelegate))
            return MyDelegate;
        return null;
    }


    private global::System.Collections.Generic.List<IDisposable> disposeList = [];

    private global::System.Collections.Generic.List<IAsyncDisposable> asyncDisposeList = [];

    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
        ((IDisposable)_singletonDisposable).Dispose();
        _ = ((IAsyncDisposable)_singletonAsyncDisposable).DisposeAsync().Preserve();

        lock (disposeList)
            foreach (IDisposable disposable in disposeList)
                disposable.Dispose();

        lock (asyncDisposeList)
            foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                if (asyncDisposable is IDisposable disposable)
                    disposable.Dispose();
                else
                    _ = asyncDisposable.DisposeAsync().Preserve();
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        ((IDisposable)_singletonDisposable).Dispose();

        lock (disposeList)
            foreach (IDisposable disposable in disposeList)
                disposable.Dispose();

        Task[] disposeTasks = new Task[1 + asyncDisposeList.Count];

        disposeTasks[0] = ((IAsyncDisposable)_singletonAsyncDisposable).DisposeAsync().AsTask();

        int index = 1;
        lock (asyncDisposeList)
            foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

        return new ValueTask(Task.WhenAll(disposeTasks));
    }


    [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_SingletonDependency1")]
    private extern static void Set_SingletonDependency2_SingletonDependency1(global::MyCode.SingletonDependency2 instance, global::MyCode.ISingletonDependency1 value);



    /// <summary>
    /// <para>
    /// Number of services registered: 16<br />
    /// - Singleton: 6<br />
    /// - Scoped: 6<br />
    /// - Transient: 3<br />
    /// - Delegate: 1
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private global::MyCode.ITestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = testProvider;

            _scoped = new global::MyCode.Scoped();
            _scopedDisposable = new global::MyCode.ScopedDisposable();
            _scopedAsyncDisposable = new global::MyCode.ScopedAsyncDisposable();
            _scopedDependency2 = new global::MyCode.ScopedDependency2() {
                ScopedDependency1 = default!
            };
            _scopedDependency1 = new global::MyCode.ScopedDependency1(ScopedDependency2);

            Set_ScopedDependency2_ScopedDependency1(_scopedDependency2, ScopedDependency1);
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScoped"/><br />
        /// Implementation type: <see cref="global::MyCode.Scoped"/>
        /// </summary>
        public global::MyCode.IScoped Scoped => _scoped;
        private global::MyCode.Scoped _scoped;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScopedDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.ScopedDisposable"/>
        /// </summary>
        public global::MyCode.IScopedDisposable ScopedDisposable => _scopedDisposable;
        private global::MyCode.ScopedDisposable _scopedDisposable;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScopedAsyncDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.ScopedAsyncDisposable"/>
        /// </summary>
        public global::MyCode.IScopedAsyncDisposable ScopedAsyncDisposable => _scopedAsyncDisposable;
        private global::MyCode.ScopedAsyncDisposable _scopedAsyncDisposable;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScopedDependency1"/><br />
        /// Implementation type: <see cref="global::MyCode.ScopedDependency1"/>
        /// </summary>
        public global::MyCode.IScopedDependency1 ScopedDependency1 => _scopedDependency1;
        private global::MyCode.ScopedDependency1 _scopedDependency1;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScopedDependency2"/><br />
        /// Implementation type: <see cref="global::MyCode.ScopedDependency2"/>
        /// </summary>
        public global::MyCode.IScopedDependency2 ScopedDependency2 => _scopedDependency2;
        private global::MyCode.ScopedDependency2 _scopedDependency2;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingleton"/><br />
        /// Implementation type: <see cref="global::MyCode.Singleton"/>
        /// </summary>
        public global::MyCode.ISingleton Singleton => _testProvider.Singleton;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingletonDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.SingletonDisposable"/>
        /// </summary>
        public global::MyCode.ISingletonDisposable SingletonDisposable => _testProvider.SingletonDisposable;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingletonAsyncDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.SingletonAsyncDisposable"/>
        /// </summary>
        public global::MyCode.ISingletonAsyncDisposable SingletonAsyncDisposable => _testProvider.SingletonAsyncDisposable;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingletonDependency1"/><br />
        /// Implementation type: <see cref="global::MyCode.SingletonDependency1"/>
        /// </summary>
        public global::MyCode.ISingletonDependency1 SingletonDependency1 => _testProvider.SingletonDependency1;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingletonDependency2"/><br />
        /// Implementation type: <see cref="global::MyCode.SingletonDependency2"/>
        /// </summary>
        public global::MyCode.ISingletonDependency2 SingletonDependency2 => _testProvider.SingletonDependency2;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITransient"/><br />
        /// Implementation type: <see cref="global::MyCode.Transient"/>
        /// </summary>
        public global::MyCode.ITransient Transient => new global::MyCode.Transient();

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITransientDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.TransientDisposable"/>
        /// </summary>
        public global::MyCode.ITransientDisposable TransientDisposable {
            get {
                global::MyCode.TransientDisposable transientDisposable = new global::MyCode.TransientDisposable();
                lock (disposeList)
                    disposeList.Add(transientDisposable);
                return transientDisposable;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITransientAsyncDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.TransientAsyncDisposable"/>
        /// </summary>
        public global::MyCode.ITransientAsyncDisposable TransientAsyncDisposable {
            get {
                global::MyCode.TransientAsyncDisposable transientAsyncDisposable = new global::MyCode.TransientAsyncDisposable();
                lock (asyncDisposeList)
                    asyncDisposeList.Add(transientAsyncDisposable);
                return transientAsyncDisposable;
            }
        }


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.DelegateAttribute{TService}">Delegate</see><br />
        /// Service type: <see cref="global::MyCode.MyDelegate"/><br />
        /// Implementation type: <see cref="global::MyCode.MyDelegate"/>
        /// </summary>
        public global::MyCode.MyDelegate MyDelegate => DelegateImpl;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            if (serviceType == typeof(global::MyCode.IScoped))
                return Scoped;
            if (serviceType == typeof(global::MyCode.IScopedAsyncDisposable))
                return ScopedAsyncDisposable;
            if (serviceType == typeof(global::MyCode.IScopedDependency1))
                return ScopedDependency1;
            if (serviceType == typeof(global::MyCode.IScopedDependency2))
                return ScopedDependency2;
            if (serviceType == typeof(global::MyCode.IScopedDisposable))
                return ScopedDisposable;
            if (serviceType == typeof(global::MyCode.ISingleton))
                return Singleton;
            if (serviceType == typeof(global::MyCode.ISingletonAsyncDisposable))
                return SingletonAsyncDisposable;
            if (serviceType == typeof(global::MyCode.ISingletonDependency1))
                return SingletonDependency1;
            if (serviceType == typeof(global::MyCode.ISingletonDependency2))
                return SingletonDependency2;
            if (serviceType == typeof(global::MyCode.ISingletonDisposable))
                return SingletonDisposable;
            if (serviceType == typeof(global::MyCode.ITestProvider))
                return Self;
            if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                return SelfScope;
            if (serviceType == typeof(global::MyCode.ITransient))
                return Transient;
            if (serviceType == typeof(global::MyCode.ITransientAsyncDisposable))
                return TransientAsyncDisposable;
            if (serviceType == typeof(global::MyCode.ITransientDisposable))
                return TransientDisposable;
            if (serviceType == typeof(global::MyCode.MyDelegate))
                return MyDelegate;
            return null;
        }


        private global::System.Collections.Generic.List<IDisposable> disposeList = [];

        private global::System.Collections.Generic.List<IAsyncDisposable> asyncDisposeList = [];

        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
            ((IDisposable)_scopedDisposable).Dispose();
            _ = ((IAsyncDisposable)_scopedAsyncDisposable).DisposeAsync().Preserve();

            lock (disposeList)
                foreach (IDisposable disposable in disposeList)
                    disposable.Dispose();

            lock (asyncDisposeList)
                foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                    if (asyncDisposable is IDisposable disposable)
                        disposable.Dispose();
                    else
                        _ = asyncDisposable.DisposeAsync().Preserve();
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            ((IDisposable)_scopedDisposable).Dispose();

            lock (disposeList)
                foreach (IDisposable disposable in disposeList)
                    disposable.Dispose();

            Task[] disposeTasks = new Task[1 + asyncDisposeList.Count];

            disposeTasks[0] = ((IAsyncDisposable)_scopedAsyncDisposable).DisposeAsync().AsTask();

            int index = 1;
            lock (asyncDisposeList)
                foreach (IAsyncDisposable asyncDisposable in asyncDisposeList)
                    disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

            return new ValueTask(Task.WhenAll(disposeTasks));
        }


        [System.Runtime.CompilerServices.UnsafeAccessor(System.Runtime.CompilerServices.UnsafeAccessorKind.Method, Name = "set_ScopedDependency1")]
        private extern static void Set_ScopedDependency2_ScopedDependency1(global::MyCode.ScopedDependency2 instance, global::MyCode.IScopedDependency1 value);
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 16<br />
/// - Singleton: 6<br />
/// - Scoped: 6<br />
/// - Transient: 3<br />
/// - Delegate: 1
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public partial interface ITestProvider : IDisposable, IAsyncDisposable {
    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    global::MyCode.ITestProvider.IScope CreateScope();

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingleton"/><br />
    /// Implementation type: <see cref="global::MyCode.Singleton"/>
    /// </summary>
    global::MyCode.ISingleton Singleton { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingletonAsyncDisposable"/><br />
    /// Implementation type: <see cref="global::MyCode.SingletonAsyncDisposable"/>
    /// </summary>
    global::MyCode.ISingletonAsyncDisposable SingletonAsyncDisposable { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingletonDependency1"/><br />
    /// Implementation type: <see cref="global::MyCode.SingletonDependency1"/>
    /// </summary>
    global::MyCode.ISingletonDependency1 SingletonDependency1 { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingletonDependency2"/><br />
    /// Implementation type: <see cref="global::MyCode.SingletonDependency2"/>
    /// </summary>
    global::MyCode.ISingletonDependency2 SingletonDependency2 { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ISingletonDisposable"/><br />
    /// Implementation type: <see cref="global::MyCode.SingletonDisposable"/>
    /// </summary>
    global::MyCode.ISingletonDisposable SingletonDisposable { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    global::MyCode.ITestProvider Self { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITransient"/><br />
    /// Implementation type: <see cref="global::MyCode.Transient"/>
    /// </summary>
    global::MyCode.ITransient Transient { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITransientAsyncDisposable"/><br />
    /// Implementation type: <see cref="global::MyCode.TransientAsyncDisposable"/>
    /// </summary>
    global::MyCode.ITransientAsyncDisposable TransientAsyncDisposable { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.ITransientDisposable"/><br />
    /// Implementation type: <see cref="global::MyCode.TransientDisposable"/>
    /// </summary>
    global::MyCode.ITransientDisposable TransientDisposable { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.DelegateAttribute{TService}">Delegate</see><br />
    /// Service type: <see cref="global::MyCode.MyDelegate"/><br />
    /// Implementation type: <see cref="global::MyCode.MyDelegate"/>
    /// </summary>
    global::MyCode.MyDelegate MyDelegate { get; }


    /// <summary>
    /// <para>
    /// Number of services registered: 16<br />
    /// - Singleton: 6<br />
    /// - Scoped: 6<br />
    /// - Transient: 3<br />
    /// - Delegate: 1
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public partial interface IScope : IDisposable, IAsyncDisposable {
        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScoped"/><br />
        /// Implementation type: <see cref="global::MyCode.Scoped"/>
        /// </summary>
        global::MyCode.IScoped Scoped { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScopedAsyncDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.ScopedAsyncDisposable"/>
        /// </summary>
        global::MyCode.IScopedAsyncDisposable ScopedAsyncDisposable { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScopedDependency1"/><br />
        /// Implementation type: <see cref="global::MyCode.ScopedDependency1"/>
        /// </summary>
        global::MyCode.IScopedDependency1 ScopedDependency1 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScopedDependency2"/><br />
        /// Implementation type: <see cref="global::MyCode.ScopedDependency2"/>
        /// </summary>
        global::MyCode.IScopedDependency2 ScopedDependency2 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.IScopedDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.ScopedDisposable"/>
        /// </summary>
        global::MyCode.IScopedDisposable ScopedDisposable { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingleton"/><br />
        /// Implementation type: <see cref="global::MyCode.Singleton"/>
        /// </summary>
        global::MyCode.ISingleton Singleton { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingletonAsyncDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.SingletonAsyncDisposable"/>
        /// </summary>
        global::MyCode.ISingletonAsyncDisposable SingletonAsyncDisposable { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingletonDependency1"/><br />
        /// Implementation type: <see cref="global::MyCode.SingletonDependency1"/>
        /// </summary>
        global::MyCode.ISingletonDependency1 SingletonDependency1 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingletonDependency2"/><br />
        /// Implementation type: <see cref="global::MyCode.SingletonDependency2"/>
        /// </summary>
        global::MyCode.ISingletonDependency2 SingletonDependency2 { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ISingletonDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.SingletonDisposable"/>
        /// </summary>
        global::MyCode.ISingletonDisposable SingletonDisposable { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        global::MyCode.ITestProvider Self { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        global::MyCode.ITestProvider.IScope SelfScope { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITransient"/><br />
        /// Implementation type: <see cref="global::MyCode.Transient"/>
        /// </summary>
        global::MyCode.ITransient Transient { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITransientAsyncDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.TransientAsyncDisposable"/>
        /// </summary>
        global::MyCode.ITransientAsyncDisposable TransientAsyncDisposable { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.ITransientDisposable"/><br />
        /// Implementation type: <see cref="global::MyCode.TransientDisposable"/>
        /// </summary>
        global::MyCode.ITransientDisposable TransientDisposable { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.DelegateAttribute{TService}">Delegate</see><br />
        /// Service type: <see cref="global::MyCode.MyDelegate"/><br />
        /// Implementation type: <see cref="global::MyCode.MyDelegate"/>
        /// </summary>
        global::MyCode.MyDelegate MyDelegate { get; }
    }
}
