// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

partial class Wrapper {
    /// <summary>
    /// <para>
    /// Number of services registered: 2<br />
    /// - Singleton: 1<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class TestProvider : global::MyCode.Wrapper.ITestProvider, IServiceProvider {
        /// <summary>
        /// Creates an instance of <see cref="global::MyCode.Wrapper.TestProvider"/> together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
        /// </summary>
        public TestProvider() {
        }

        /// <summary>
        /// Creates an instance of <see cref="global::MyCode.Wrapper.TestProvider.Scope"/> together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        public global::MyCode.Wrapper.ITestProvider.IScope CreateScope() => new global::MyCode.Wrapper.TestProvider.Scope(Self);


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.Wrapper.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.Wrapper.TestProvider"/>
        /// </summary>
        public global::MyCode.Wrapper.ITestProvider Self => this;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            if (serviceType == typeof(global::MyCode.Wrapper.ITestProvider))
                return Self;
            return null;
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }



        /// <summary>
        /// <para>
        /// Number of services registered: 2<br />
        /// - Singleton: 1<br />
        /// - Scoped: 1<br />
        /// - Transient: 0<br />
        /// - Delegate: 0
        /// </para>
        /// <para>
        /// This provider can create a scope,<br />
        /// implements both Dispose() and DisposeAsync() methods<br />
        /// and is thread safe.
        /// </para>
        /// </summary>
        public sealed partial class Scope : global::MyCode.Wrapper.ITestProvider.IScope, IServiceProvider {
            private global::MyCode.Wrapper.ITestProvider _testProvider;

            /// <summary>
            /// Creates an instance of <see cref="global::MyCode.Wrapper.TestProvider.Scope"/> together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
            /// </summary>
            /// <param name="testProvider">An instance of the service provider this provider is the scope of.</param>
            public Scope(global::MyCode.Wrapper.ITestProvider testProvider) {
                _testProvider = testProvider;
            }

            /// <summary>
            /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
            /// Service type: <see cref="global::MyCode.Wrapper.ITestProvider.IScope"/><br />
            /// Implementation type: <see cref="global::MyCode.Wrapper.TestProvider.Scope"/>
            /// </summary>
            public global::MyCode.Wrapper.ITestProvider.IScope SelfScope => this;


            /// <summary>
            /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
            /// Service type: <see cref="global::MyCode.Wrapper.ITestProvider"/><br />
            /// Implementation type: <see cref="global::MyCode.Wrapper.TestProvider"/>
            /// </summary>
            public global::MyCode.Wrapper.ITestProvider Self => _testProvider.Self;


            /// <summary>
            /// <para>Finds all registered services of the given type.</para>
            /// <para>
            /// The method returns<br />
            /// - null (when registered zero times)<br />
            /// - given type (when registered ones)<br />
            /// - Array of given type (when registered many times)
            /// </para>
            /// </summary>
            object? IServiceProvider.GetService(Type serviceType) {
                if (serviceType == typeof(global::MyCode.Wrapper.ITestProvider))
                    return Self;
                if (serviceType == typeof(global::MyCode.Wrapper.ITestProvider.IScope))
                    return SelfScope;
                return null;
            }


            /// <summary>
            /// Disposes all disposable services instantiated by this provider.
            /// </summary>
            public void Dispose() {
            }

            /// <summary>
            /// Disposes all disposable services instantiated by this provider asynchronously.
            /// </summary>
            public ValueTask DisposeAsync() {
                return default;
            }
        }
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

partial class Wrapper {
    /// <summary>
    /// <para>
    /// Number of services registered: 2<br />
    /// - Singleton: 1<br />
    /// - Scoped: 1<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public partial interface ITestProvider : IDisposable, IAsyncDisposable {
        /// <summary>
        /// Creates an instance of <see cref="global::MyCode.Wrapper.TestProvider.Scope"/> together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        global::MyCode.Wrapper.ITestProvider.IScope CreateScope();

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.Wrapper.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.Wrapper.TestProvider"/>
        /// </summary>
        global::MyCode.Wrapper.ITestProvider Self { get; }


        /// <summary>
        /// <para>
        /// Number of services registered: 2<br />
        /// - Singleton: 1<br />
        /// - Scoped: 1<br />
        /// - Transient: 0<br />
        /// - Delegate: 0
        /// </para>
        /// <para>
        /// This provider can create a scope,<br />
        /// implements both Dispose() and DisposeAsync() methods<br />
        /// and is thread safe.
        /// </para>
        /// </summary>
        public partial interface IScope : IDisposable, IAsyncDisposable {
            /// <summary>
            /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
            /// Service type: <see cref="global::MyCode.Wrapper.ITestProvider"/><br />
            /// Implementation type: <see cref="global::MyCode.Wrapper.TestProvider"/>
            /// </summary>
            global::MyCode.Wrapper.ITestProvider Self { get; }

            /// <summary>
            /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
            /// Service type: <see cref="global::MyCode.Wrapper.ITestProvider.IScope"/><br />
            /// Implementation type: <see cref="global::MyCode.Wrapper.TestProvider.Scope"/>
            /// </summary>
            global::MyCode.Wrapper.ITestProvider.IScope SelfScope { get; }
        }
    }
}
