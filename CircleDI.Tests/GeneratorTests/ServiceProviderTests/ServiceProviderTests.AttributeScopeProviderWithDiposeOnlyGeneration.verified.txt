// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 4<br />
/// - Singleton: 1<br />
/// - Scoped: 1<br />
/// - Transient: 2<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider() {
        _disposeList = [];
        _asyncDisposeList = [];
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope() {
        return new global::MyCode.TestProvider.Scope(this);
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.IServiceDispose"/><br />
    /// Implementation type: <see cref="global::MyCode.ServiceDispose"/>
    /// </summary>
    public global::MyCode.IServiceDispose ServiceDispose {
        get {
            global::MyCode.ServiceDispose serviceDispose = new global::MyCode.ServiceDispose();
            lock (_disposeList) {
                _disposeList.Add(serviceDispose);
            }
            return serviceDispose;
        }
    }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.IServiceDisposeAsync"/><br />
    /// Implementation type: <see cref="global::MyCode.ServiceDisposeAsync"/>
    /// </summary>
    public global::MyCode.IServiceDisposeAsync ServiceDisposeAsync {
        get {
            global::MyCode.ServiceDisposeAsync serviceDisposeAsync = new global::MyCode.ServiceDisposeAsync();
            lock (_asyncDisposeList) {
                _asyncDisposeList.Add(serviceDisposeAsync);
            }
            return serviceDisposeAsync;
        }
    }


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            case "IServiceDispose":
                if (serviceType == typeof(global::MyCode.IServiceDispose))
                    return ServiceDispose;
                return null;
            case "IServiceDisposeAsync":
                if (serviceType == typeof(global::MyCode.IServiceDisposeAsync))
                    return ServiceDisposeAsync;
                return null;
            default:
                return null;
        }
    }


    private readonly global::System.Collections.Generic.List<IDisposable> _disposeList;

    private readonly global::System.Collections.Generic.List<IAsyncDisposable> _asyncDisposeList;

    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
        lock (_disposeList)
            foreach (IDisposable disposable in _disposeList)
                disposable.Dispose();

        lock (_asyncDisposeList)
            foreach (IAsyncDisposable asyncDisposable in _asyncDisposeList)
                if (asyncDisposable is IDisposable disposable)
                    disposable.Dispose();
                else
                    _ = asyncDisposable.DisposeAsync().Preserve();
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        lock (_disposeList)
            foreach (IDisposable disposable in _disposeList)
                disposable.Dispose();

        Task[] disposeTasks = new Task[_asyncDisposeList.Count];

        int index = 0;
        lock (_asyncDisposeList)
            foreach (IAsyncDisposable asyncDisposable in _asyncDisposeList)
                disposeTasks[index++] = asyncDisposable.DisposeAsync().AsTask();

        return new ValueTask(Task.WhenAll(disposeTasks));
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 4<br />
    /// - Singleton: 1<br />
    /// - Scoped: 1<br />
    /// - Transient: 2<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements only synchronous Dispose() method<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private readonly global::MyCode.TestProvider _testProvider;

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of. It must be an instance of <see cref="TestProvider"/>.</param>
        public Scope(global::MyCode.ITestProvider testProvider) {
            _testProvider = (global::MyCode.TestProvider)testProvider;

            _disposeList = [];
            _asyncDisposeList = [];
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.IServiceDispose"/><br />
        /// Implementation type: <see cref="global::MyCode.ServiceDispose"/>
        /// </summary>
        public global::MyCode.IServiceDispose ServiceDispose {
            get {
                global::MyCode.ServiceDispose serviceDispose = new global::MyCode.ServiceDispose();
                lock (_disposeList) {
                    _disposeList.Add(serviceDispose);
                }
                return serviceDispose;
            }
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.IServiceDisposeAsync"/><br />
        /// Implementation type: <see cref="global::MyCode.ServiceDisposeAsync"/>
        /// </summary>
        public global::MyCode.IServiceDisposeAsync ServiceDisposeAsync {
            get {
                global::MyCode.ServiceDisposeAsync serviceDisposeAsync = new global::MyCode.ServiceDisposeAsync();
                lock (_asyncDisposeList) {
                    _asyncDisposeList.Add(serviceDisposeAsync);
                }
                return serviceDisposeAsync;
            }
        }


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                case "IServiceDispose":
                    if (serviceType == typeof(global::MyCode.IServiceDispose))
                        return ServiceDispose;
                    return null;
                case "IServiceDisposeAsync":
                    if (serviceType == typeof(global::MyCode.IServiceDisposeAsync))
                        return ServiceDisposeAsync;
                    return null;
                default:
                    return null;
            }
        }


        private readonly global::System.Collections.Generic.List<IDisposable> _disposeList;

        private readonly global::System.Collections.Generic.List<IAsyncDisposable> _asyncDisposeList;

        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
            lock (_disposeList)
                foreach (IDisposable disposable in _disposeList)
                    disposable.Dispose();

            lock (_asyncDisposeList)
                foreach (IAsyncDisposable asyncDisposable in _asyncDisposeList)
                    if (asyncDisposable is IDisposable disposable)
                        disposable.Dispose();
                    else
                        _ = asyncDisposable.DisposeAsync().Preserve();
        }
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 4<br />
/// - Singleton: 1<br />
/// - Scoped: 1<br />
/// - Transient: 2<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public partial interface ITestProvider : IDisposable, IAsyncDisposable {
    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    global::MyCode.ITestProvider.IScope CreateScope();

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    global::MyCode.ITestProvider Self { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.IServiceDispose"/><br />
    /// Implementation type: <see cref="global::MyCode.ServiceDispose"/>
    /// </summary>
    global::MyCode.IServiceDispose ServiceDispose { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
    /// Service type: <see cref="global::MyCode.IServiceDisposeAsync"/><br />
    /// Implementation type: <see cref="global::MyCode.ServiceDisposeAsync"/>
    /// </summary>
    global::MyCode.IServiceDisposeAsync ServiceDisposeAsync { get; }


    /// <summary>
    /// <para>
    /// Number of services registered: 4<br />
    /// - Singleton: 1<br />
    /// - Scoped: 1<br />
    /// - Transient: 2<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements only synchronous Dispose() method<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public partial interface IScope : IDisposable {
        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        global::MyCode.ITestProvider.IScope SelfScope { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        global::MyCode.ITestProvider Self { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.IServiceDispose"/><br />
        /// Implementation type: <see cref="global::MyCode.ServiceDispose"/>
        /// </summary>
        global::MyCode.IServiceDispose ServiceDispose { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.TransientAttribute{TService}">Transient</see><br />
        /// Service type: <see cref="global::MyCode.IServiceDisposeAsync"/><br />
        /// Implementation type: <see cref="global::MyCode.ServiceDisposeAsync"/>
        /// </summary>
        global::MyCode.IServiceDisposeAsync ServiceDisposeAsync { get; }
    }
}
