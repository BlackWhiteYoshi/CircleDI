// <auto-generated/>
#pragma warning disable
#nullable enable annotations


namespace MyCode;

partial class TestProvider {
    private global::Microsoft.Extensions.Configuration.IConfiguration GetConfiguration() => (Microsoft.Extensions.Configuration.IConfiguration)_builtinServiceProvider.GetService(typeof(Microsoft.Extensions.Configuration.IConfiguration));
    private global::Microsoft.Extensions.Logging.ILoggerFactory GetLoggerFactory() => (Microsoft.Extensions.Logging.ILoggerFactory)_builtinServiceProvider.GetService(typeof(Microsoft.Extensions.Logging.ILoggerFactory));
    private global::Microsoft.Extensions.Logging.ILogger<TCategoryName> GetLogger<TCategoryName>() => (Microsoft.Extensions.Logging.ILogger<TCategoryName>)_builtinServiceProvider.GetService(typeof(Microsoft.Extensions.Logging.ILogger<TCategoryName>));

    partial class Scope {
        private global::Microsoft.JSInterop.IJSRuntime GetJSRuntime() => (Microsoft.JSInterop.IJSRuntime)_builtinServiceProvider.GetService(typeof(Microsoft.JSInterop.IJSRuntime));
        private global::Microsoft.AspNetCore.Components.NavigationManager GetNavigationManager() => (Microsoft.AspNetCore.Components.NavigationManager)_builtinServiceProvider.GetService(typeof(Microsoft.AspNetCore.Components.NavigationManager));
        private global::Microsoft.AspNetCore.Components.Routing.INavigationInterception GetNavigationInterception() => (Microsoft.AspNetCore.Components.Routing.INavigationInterception)_builtinServiceProvider.GetService(typeof(Microsoft.AspNetCore.Components.Routing.INavigationInterception));
        private global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash GetScrollToLocationHash() => (Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash)_builtinServiceProvider.GetService(typeof(Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash));
        private global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger GetErrorBoundaryLogger() => (Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger)_builtinServiceProvider.GetService(typeof(Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger));
        private global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager GetComponentStatePersistenceManager() => (Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager)_builtinServiceProvider.GetService(typeof(Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager));
        private global::Microsoft.AspNetCore.Components.PersistentComponentState GetPersistentComponentState() => (Microsoft.AspNetCore.Components.PersistentComponentState)_builtinServiceProvider.GetService(typeof(Microsoft.AspNetCore.Components.PersistentComponentState));
        private global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider GetAntiforgeryStateProvider() => (Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider)_builtinServiceProvider.GetService(typeof(Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider));
    }
}


-----
Class
-----

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;
using System.Threading.Tasks;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 14<br />
/// - Singleton: 5<br />
/// - Scoped: 9<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public sealed partial class TestProvider : global::MyCode.ITestProvider, IServiceProvider {
    private readonly global::System.IServiceProvider _builtinServiceProvider;

    /// <summary>
    /// Creates an instance of a ServiceProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> singleton services.
    /// </summary>
    public TestProvider(global::System.IServiceProvider builtinServiceProvider) {
        _builtinServiceProvider = builtinServiceProvider;

        _logger_TestService = GetLogger<global::MyCode.TestService>();
        _testService = new global::MyCode.TestService(_logger_TestService);
        _loggerFactory = GetLoggerFactory();
        _configuration = GetConfiguration();
    }

    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    public global::MyCode.ITestProvider.IScope CreateScope(global::System.IServiceProvider builtinServiceProvider) {
        return new global::MyCode.TestProvider.Scope(this, builtinServiceProvider);
    }


    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestService"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService"/>
    /// </summary>
    public global::MyCode.TestService TestService => _testService;
    private readonly global::MyCode.TestService _testService;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    public global::MyCode.ITestProvider Self => this;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::Microsoft.Extensions.Logging.ILoggerFactory"/><br />
    /// Implementation type: <see cref="global::Microsoft.Extensions.Logging.ILoggerFactory"/>
    /// </summary>
    public global::Microsoft.Extensions.Logging.ILoggerFactory LoggerFactory => _loggerFactory;
    private readonly global::Microsoft.Extensions.Logging.ILoggerFactory _loggerFactory;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::Microsoft.Extensions.Configuration.IConfiguration"/><br />
    /// Implementation type: <see cref="global::Microsoft.Extensions.Configuration.IConfiguration"/>
    /// </summary>
    public global::Microsoft.Extensions.Configuration.IConfiguration Configuration => _configuration;
    private readonly global::Microsoft.Extensions.Configuration.IConfiguration _configuration;

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::Microsoft.Extensions.Logging.ILogger{global::MyCode.TestService}"/><br />
    /// Implementation type: <see cref="global::Microsoft.Extensions.Logging.ILogger{global::MyCode.TestService}"/>
    /// </summary>
    public global::Microsoft.Extensions.Logging.ILogger<global::MyCode.TestService> Logger_TestService => _logger_TestService;
    private readonly global::Microsoft.Extensions.Logging.ILogger<global::MyCode.TestService> _logger_TestService;


    /// <summary>
    /// <para>Finds all registered services of the given type.</para>
    /// <para>
    /// The method returns<br />
    /// - null (when registered zero times)<br />
    /// - given type (when registered ones)<br />
    /// - Array of given type (when registered many times)
    /// </para>
    /// </summary>
    object? IServiceProvider.GetService(Type serviceType) {
        switch (serviceType.Name) {
            case "ILogger`1":
                if (serviceType == typeof(global::Microsoft.Extensions.Logging.ILogger<global::MyCode.TestService>))
                    return Logger_TestService;
                return null;
            case "TestService":
                if (serviceType == typeof(global::MyCode.TestService))
                    return TestService;
                return null;
            case "ITestProvider":
                if (serviceType == typeof(global::MyCode.ITestProvider))
                    return Self;
                return null;
            case "IConfiguration":
                if (serviceType == typeof(global::Microsoft.Extensions.Configuration.IConfiguration))
                    return Configuration;
                return null;
            case "ILoggerFactory":
                if (serviceType == typeof(global::Microsoft.Extensions.Logging.ILoggerFactory))
                    return LoggerFactory;
                return null;
            default:
                return null;
        }
    }


    /// <summary>
    /// Disposes all disposable services instantiated by this provider.
    /// </summary>
    public void Dispose() {
    }

    /// <summary>
    /// Disposes all disposable services instantiated by this provider asynchronously.
    /// </summary>
    public ValueTask DisposeAsync() {
        return default;
    }



    /// <summary>
    /// <para>
    /// Number of services registered: 14<br />
    /// - Singleton: 5<br />
    /// - Scoped: 9<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public sealed partial class Scope : global::MyCode.ITestProvider.IScope, IServiceProvider {
        private readonly global::MyCode.TestProvider _testProvider;
        private readonly global::System.IServiceProvider _builtinServiceProvider;

        private readonly global::System.Object _lock = new();

        /// <summary>
        /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
        /// </summary>
        /// <param name="testProvider">An instance of the service provider this provider is the scope of. It must be an instance of <see cref="TestProvider"/>.</param>
        public Scope(global::MyCode.ITestProvider testProvider, global::System.IServiceProvider builtinServiceProvider) {
            _testProvider = (global::MyCode.TestProvider)testProvider;
            _builtinServiceProvider = builtinServiceProvider;
        }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        public global::MyCode.ITestProvider.IScope SelfScope => this;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.JSInterop.IJSRuntime"/><br />
        /// Implementation type: <see cref="global::Microsoft.JSInterop.IJSRuntime"/>
        /// </summary>
        public global::Microsoft.JSInterop.IJSRuntime JSRuntime {
            get {
                if (_jSRuntime is null)
                    lock (_lock)
                        if (_jSRuntime is null) {
                            _jSRuntime = GetJSRuntime();
                        }
                return _jSRuntime;
            }
        }
        private global::Microsoft.JSInterop.IJSRuntime? _jSRuntime;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.NavigationManager"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.NavigationManager"/>
        /// </summary>
        public global::Microsoft.AspNetCore.Components.NavigationManager NavigationManager {
            get {
                if (_navigationManager is null)
                    lock (_lock)
                        if (_navigationManager is null) {
                            _navigationManager = GetNavigationManager();
                        }
                return _navigationManager;
            }
        }
        private global::Microsoft.AspNetCore.Components.NavigationManager? _navigationManager;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Routing.INavigationInterception"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Routing.INavigationInterception"/>
        /// </summary>
        public global::Microsoft.AspNetCore.Components.Routing.INavigationInterception NavigationInterception {
            get {
                if (_navigationInterception is null)
                    lock (_lock)
                        if (_navigationInterception is null) {
                            _navigationInterception = GetNavigationInterception();
                        }
                return _navigationInterception;
            }
        }
        private global::Microsoft.AspNetCore.Components.Routing.INavigationInterception? _navigationInterception;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash"/>
        /// </summary>
        public global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash ScrollToLocationHash {
            get {
                if (_scrollToLocationHash is null)
                    lock (_lock)
                        if (_scrollToLocationHash is null) {
                            _scrollToLocationHash = GetScrollToLocationHash();
                        }
                return _scrollToLocationHash;
            }
        }
        private global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash? _scrollToLocationHash;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger"/>
        /// </summary>
        public global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger ErrorBoundaryLogger {
            get {
                if (_errorBoundaryLogger is null)
                    lock (_lock)
                        if (_errorBoundaryLogger is null) {
                            _errorBoundaryLogger = GetErrorBoundaryLogger();
                        }
                return _errorBoundaryLogger;
            }
        }
        private global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger? _errorBoundaryLogger;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager"/>
        /// </summary>
        public global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager ComponentStatePersistenceManager {
            get {
                if (_componentStatePersistenceManager is null)
                    lock (_lock)
                        if (_componentStatePersistenceManager is null) {
                            _componentStatePersistenceManager = GetComponentStatePersistenceManager();
                        }
                return _componentStatePersistenceManager;
            }
        }
        private global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager? _componentStatePersistenceManager;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.PersistentComponentState"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.PersistentComponentState"/>
        /// </summary>
        public global::Microsoft.AspNetCore.Components.PersistentComponentState PersistentComponentState {
            get {
                if (_persistentComponentState is null)
                    lock (_lock)
                        if (_persistentComponentState is null) {
                            _persistentComponentState = GetPersistentComponentState();
                        }
                return _persistentComponentState;
            }
        }
        private global::Microsoft.AspNetCore.Components.PersistentComponentState? _persistentComponentState;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider"/>
        /// </summary>
        public global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider AntiforgeryStateProvider {
            get {
                if (_antiforgeryStateProvider is null)
                    lock (_lock)
                        if (_antiforgeryStateProvider is null) {
                            _antiforgeryStateProvider = GetAntiforgeryStateProvider();
                        }
                return _antiforgeryStateProvider;
            }
        }
        private global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider? _antiforgeryStateProvider;


        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestService"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService"/>
        /// </summary>
        public global::MyCode.TestService TestService => _testProvider.TestService;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        public global::MyCode.ITestProvider Self => _testProvider.Self;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::Microsoft.Extensions.Logging.ILoggerFactory"/><br />
        /// Implementation type: <see cref="global::Microsoft.Extensions.Logging.ILoggerFactory"/>
        /// </summary>
        public global::Microsoft.Extensions.Logging.ILoggerFactory LoggerFactory => _testProvider.LoggerFactory;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::Microsoft.Extensions.Configuration.IConfiguration"/><br />
        /// Implementation type: <see cref="global::Microsoft.Extensions.Configuration.IConfiguration"/>
        /// </summary>
        public global::Microsoft.Extensions.Configuration.IConfiguration Configuration => _testProvider.Configuration;

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::Microsoft.Extensions.Logging.ILogger{global::MyCode.TestService}"/><br />
        /// Implementation type: <see cref="global::Microsoft.Extensions.Logging.ILogger{global::MyCode.TestService}"/>
        /// </summary>
        public global::Microsoft.Extensions.Logging.ILogger<global::MyCode.TestService> Logger_TestService => _testProvider.Logger_TestService;


        /// <summary>
        /// <para>Finds all registered services of the given type.</para>
        /// <para>
        /// The method returns<br />
        /// - null (when registered zero times)<br />
        /// - given type (when registered ones)<br />
        /// - Array of given type (when registered many times)
        /// </para>
        /// </summary>
        object? IServiceProvider.GetService(Type serviceType) {
            switch (serviceType.Name) {
                case "IScope":
                    if (serviceType == typeof(global::MyCode.ITestProvider.IScope))
                        return SelfScope;
                    return null;
                case "ILogger`1":
                    if (serviceType == typeof(global::Microsoft.Extensions.Logging.ILogger<global::MyCode.TestService>))
                        return Logger_TestService;
                    return null;
                case "IJSRuntime":
                    if (serviceType == typeof(global::Microsoft.JSInterop.IJSRuntime))
                        return JSRuntime;
                    return null;
                case "TestService":
                    if (serviceType == typeof(global::MyCode.TestService))
                        return TestService;
                    return null;
                case "ITestProvider":
                    if (serviceType == typeof(global::MyCode.ITestProvider))
                        return Self;
                    return null;
                case "IConfiguration":
                    if (serviceType == typeof(global::Microsoft.Extensions.Configuration.IConfiguration))
                        return Configuration;
                    return null;
                case "ILoggerFactory":
                    if (serviceType == typeof(global::Microsoft.Extensions.Logging.ILoggerFactory))
                        return LoggerFactory;
                    return null;
                case "NavigationManager":
                    if (serviceType == typeof(global::Microsoft.AspNetCore.Components.NavigationManager))
                        return NavigationManager;
                    return null;
                case "IErrorBoundaryLogger":
                    if (serviceType == typeof(global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger))
                        return ErrorBoundaryLogger;
                    return null;
                case "IScrollToLocationHash":
                    if (serviceType == typeof(global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash))
                        return ScrollToLocationHash;
                    return null;
                case "INavigationInterception":
                    if (serviceType == typeof(global::Microsoft.AspNetCore.Components.Routing.INavigationInterception))
                        return NavigationInterception;
                    return null;
                case "AntiforgeryStateProvider":
                    if (serviceType == typeof(global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider))
                        return AntiforgeryStateProvider;
                    return null;
                case "PersistentComponentState":
                    if (serviceType == typeof(global::Microsoft.AspNetCore.Components.PersistentComponentState))
                        return PersistentComponentState;
                    return null;
                case "ComponentStatePersistenceManager":
                    if (serviceType == typeof(global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager))
                        return ComponentStatePersistenceManager;
                    return null;
                default:
                    return null;
            }
        }


        /// <summary>
        /// Disposes all disposable services instantiated by this provider.
        /// </summary>
        public void Dispose() {
        }

        /// <summary>
        /// Disposes all disposable services instantiated by this provider asynchronously.
        /// </summary>
        public ValueTask DisposeAsync() {
            return default;
        }
    }
}


---------
Interface
---------

// <auto-generated/>
#pragma warning disable
#nullable enable annotations


using System;

namespace MyCode;

/// <summary>
/// <para>
/// Number of services registered: 14<br />
/// - Singleton: 5<br />
/// - Scoped: 9<br />
/// - Transient: 0<br />
/// - Delegate: 0
/// </para>
/// <para>
/// This provider can create a scope,<br />
/// implements both Dispose() and DisposeAsync() methods<br />
/// and is thread safe.
/// </para>
/// </summary>
public partial interface ITestProvider : IDisposable, IAsyncDisposable {
    /// <summary>
    /// Creates an instance of a ScopeProvider together with all <see cref="global::CircleDIAttributes.CreationTiming.Constructor">non-lazy</see> scoped services.
    /// </summary>
    global::MyCode.ITestProvider.IScope CreateScope(global::System.IServiceProvider builtinServiceProvider);

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::Microsoft.Extensions.Logging.ILogger{global::MyCode.TestService}"/><br />
    /// Implementation type: <see cref="global::Microsoft.Extensions.Logging.ILogger{global::MyCode.TestService}"/>
    /// </summary>
    global::Microsoft.Extensions.Logging.ILogger<global::MyCode.TestService> Logger_TestService { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.TestService"/><br />
    /// Implementation type: <see cref="global::MyCode.TestService"/>
    /// </summary>
    global::MyCode.TestService TestService { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
    /// Implementation type: <see cref="global::MyCode.TestProvider"/>
    /// </summary>
    global::MyCode.ITestProvider Self { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::Microsoft.Extensions.Configuration.IConfiguration"/><br />
    /// Implementation type: <see cref="global::Microsoft.Extensions.Configuration.IConfiguration"/>
    /// </summary>
    global::Microsoft.Extensions.Configuration.IConfiguration Configuration { get; }

    /// <summary>
    /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
    /// Service type: <see cref="global::Microsoft.Extensions.Logging.ILoggerFactory"/><br />
    /// Implementation type: <see cref="global::Microsoft.Extensions.Logging.ILoggerFactory"/>
    /// </summary>
    global::Microsoft.Extensions.Logging.ILoggerFactory LoggerFactory { get; }


    /// <summary>
    /// <para>
    /// Number of services registered: 14<br />
    /// - Singleton: 5<br />
    /// - Scoped: 9<br />
    /// - Transient: 0<br />
    /// - Delegate: 0
    /// </para>
    /// <para>
    /// This provider can create a scope,<br />
    /// implements both Dispose() and DisposeAsync() methods<br />
    /// and is thread safe.
    /// </para>
    /// </summary>
    public partial interface IScope : IDisposable, IAsyncDisposable {
        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider.IScope"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider.Scope"/>
        /// </summary>
        global::MyCode.ITestProvider.IScope SelfScope { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::Microsoft.Extensions.Logging.ILogger{global::MyCode.TestService}"/><br />
        /// Implementation type: <see cref="global::Microsoft.Extensions.Logging.ILogger{global::MyCode.TestService}"/>
        /// </summary>
        global::Microsoft.Extensions.Logging.ILogger<global::MyCode.TestService> Logger_TestService { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.JSInterop.IJSRuntime"/><br />
        /// Implementation type: <see cref="global::Microsoft.JSInterop.IJSRuntime"/>
        /// </summary>
        global::Microsoft.JSInterop.IJSRuntime JSRuntime { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.TestService"/><br />
        /// Implementation type: <see cref="global::MyCode.TestService"/>
        /// </summary>
        global::MyCode.TestService TestService { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::MyCode.ITestProvider"/><br />
        /// Implementation type: <see cref="global::MyCode.TestProvider"/>
        /// </summary>
        global::MyCode.ITestProvider Self { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::Microsoft.Extensions.Configuration.IConfiguration"/><br />
        /// Implementation type: <see cref="global::Microsoft.Extensions.Configuration.IConfiguration"/>
        /// </summary>
        global::Microsoft.Extensions.Configuration.IConfiguration Configuration { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.SingletonAttribute{TService}">Singleton</see><br />
        /// Service type: <see cref="global::Microsoft.Extensions.Logging.ILoggerFactory"/><br />
        /// Implementation type: <see cref="global::Microsoft.Extensions.Logging.ILoggerFactory"/>
        /// </summary>
        global::Microsoft.Extensions.Logging.ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.NavigationManager"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.NavigationManager"/>
        /// </summary>
        global::Microsoft.AspNetCore.Components.NavigationManager NavigationManager { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger"/>
        /// </summary>
        global::Microsoft.AspNetCore.Components.Web.IErrorBoundaryLogger ErrorBoundaryLogger { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash"/>
        /// </summary>
        global::Microsoft.AspNetCore.Components.Routing.IScrollToLocationHash ScrollToLocationHash { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Routing.INavigationInterception"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Routing.INavigationInterception"/>
        /// </summary>
        global::Microsoft.AspNetCore.Components.Routing.INavigationInterception NavigationInterception { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider"/>
        /// </summary>
        global::Microsoft.AspNetCore.Components.Forms.AntiforgeryStateProvider AntiforgeryStateProvider { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.PersistentComponentState"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.PersistentComponentState"/>
        /// </summary>
        global::Microsoft.AspNetCore.Components.PersistentComponentState PersistentComponentState { get; }

        /// <summary>
        /// Lifetime: <see cref="global::CircleDIAttributes.ScopedAttribute{TService}">Scoped</see><br />
        /// Service type: <see cref="global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager"/><br />
        /// Implementation type: <see cref="global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager"/>
        /// </summary>
        global::Microsoft.AspNetCore.Components.Infrastructure.ComponentStatePersistenceManager ComponentStatePersistenceManager { get; }
    }
}
